<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/01/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>/2023/01/%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><h2 id="OSI-七层与-TCP-x2F-IP-五层模型"><a href="#OSI-七层与-TCP-x2F-IP-五层模型" class="headerlink" title="OSI 七层与 TCP&#x2F;IP 五层模型"></a>OSI 七层与 TCP&#x2F;IP 五层模型</h2><ul><li><p>OSI七层</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">应用层</span><br><span class="line">表示层</span><br><span class="line">会话层</span><br><span class="line">传输层</span><br><span class="line">网络层</span><br><span class="line">数据链路层</span><br><span class="line">物理层</span><br></pre></td></tr></table></figure></li><li><p>TCP&#x2F;IP五层</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">应用层：HTTP、DNS、FTP、TFTP、SMTP、SNMP、Telnet</span><br><span class="line">传输层：TCP、UDP</span><br><span class="line">网络层：IP、ICMP、RIP、OSPF、BGP、IGMP</span><br><span class="line">数据链路层：SLIP、CSLIP、PPP、ARP、RARP、MTU</span><br><span class="line">物理层</span><br></pre></td></tr></table></figure><h2 id="应用层的协议哪些是基于-TCP-协议的，哪些是基于-UDP-协议的"><a href="#应用层的协议哪些是基于-TCP-协议的，哪些是基于-UDP-协议的" class="headerlink" title="应用层的协议哪些是基于 TCP 协议的，哪些是基于 UDP 协议的"></a>应用层的协议哪些是基于 TCP 协议的，哪些是基于 UDP 协议的</h2></li></ul><h3 id="基于-TCP-协议的"><a href="#基于-TCP-协议的" class="headerlink" title="基于 TCP 协议的"></a>基于 TCP 协议的</h3><ul><li><p><strong>HTTP（超文本传输协议）：是从 Web 服务器传输超文本到本地浏览器的传送协议，使用80端口。</strong></p></li><li><p><strong>HTTPS（超文本传输安全协议）：使用443端口</strong></p></li><li><p><strong>FTP（文件传输协议）：定义了文件传输协议，使用 21 端口。</strong></p></li><li><p>TELNET（远程登陆协议）：一种用于远程登陆的端口，使用 23 端口，用户可以以自己的身份远程连接到计算机上，可提供基于 DOS 模式下的通信服务。</p></li><li><p>SMTP（简单邮件传输协议）：邮件传送协议，用于发送邮件。服务器开放的是 25 号端口。</p></li><li><p>POP3（邮件读取协议）：它是和 SMTP 对应，POP3 用于接收邮件。POP3 协议所用的是 110 端口。</p></li></ul><h3 id="基于-UDP-协议的"><a href="#基于-UDP-协议的" class="headerlink" title="基于 UDP 协议的"></a>基于 UDP 协议的</h3><ul><li><strong>TFTP（简单文件传输协议）：该协议在熟知端口 69 上使用 UDP 服务。</strong></li><li><strong>DHCP（动态主机配置协议）：是一个局域网的网络协议</strong></li><li>SNMP（简单网络管理协议）：使用 161 号端口，是用来管理网络设备的。由于网络设备很多，无连接的服务就体现出其优势。</li><li>BOOTP（引导程序协议，DHCP 的前身）：应用于无盘设备</li><li>RIP（路由信息协议）：基于距离矢量算法的路由协议，利用跳数来作为计量标准。</li><li>IGMP（Internet 组管理协议）</li></ul><h3 id="基于-TCP-和-UDP-协议的"><a href="#基于-TCP-和-UDP-协议的" class="headerlink" title="基于 TCP 和 UDP 协议的"></a>基于 TCP 和 UDP 协议的</h3><ul><li><strong>DNS（域名系统）：DNS 区域传输的时候使用 TCP 协议。域名解析时使用 UDP 协议。DNS 用的是 53 号端口。</strong></li><li>ECHO（回绕协议）</li></ul><h2 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h2><blockquote><p>简述版：<a href="https://github.com/lf2021/Front-End-Interview/blob/master/01.%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B5%8F%E8%A7%88%E5%99%A8.md#http-%E7%8A%B6%E6%80%81%E7%A0%81">github笔记</a></p></blockquote><ol><li>1XX：消息状态码。</li><li>2XX：成功状态码。</li><li>3XX：重定向状态码。</li><li>4XX：客户端错误状态码。</li><li>5XX：服务端错误状态码。</li></ol><p>1XX为<strong>消息状态码</strong>，其中：</p><ul><li><strong>100：Continue 继续。客户端应继续其请求。</strong></li><li><strong>101：Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到 HTTP 的新版本协议。</strong></li></ul><p>2XX为<strong>成功状态码</strong>，其中：</p><ul><li><strong>200：OK 请求成功。一般用于 GET 与 POST 请求。</strong></li><li>201：Created 已创建。成功请求并创建了新的资源。</li><li>202：Accepted 已接受。已经接受请求，但未处理完成。</li><li>203：Non-Authoritative Information 非授权信息。请求成功。但返回的 meta 信息不在原始的服务器，而是一个副本。</li><li><strong>204：No Content 无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档。</strong></li><li>205：Reset Content 重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域。</li><li><strong>206：Partial Content 部分内容。服务器成功处理了部分 GET 请求。</strong></li></ul><p>3XX为<strong>重定向状态码</strong>，其中：</p><ul><li><strong>300：Multiple Choices 多种选择。</strong>请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择。</li><li><strong>301：Moved Permanently 永久移动。请求的资源已被永久的移动到新 URI，返回信息会包括新的 URI，浏览器会自动定向到新 URI。今后任何新的请求都应使用新的 URI 代替。</strong></li><li><strong>302：Found 临时移动，与 301 类似。但资源只是临时被移动。客户端应继续使用原有URI。</strong></li><li><strong>303：See Other 查看其它地址。与 301 类似。使用 GET 和 POST 请求查看。</strong></li><li>304：<strong>Not Modified 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源。</strong></li><li>305：Use Proxy 使用代理。所请求的资源必须通过代理访问。</li><li>306：Unused 已经被废弃的 HTTP 状态码。</li><li>307：Temporary Redirect 临时重定向。与 302 类似。使用 GET 请求重定向。</li></ul><p>4XX为客户端<strong>错误状态码</strong>，其中：</p><ul><li><strong>400：Bad Request 客户端请求的语法错误，服务器无法理解。</strong></li><li><strong>401：Unauthorized 请求要求用户的身份认证。</strong></li><li>402：Payment Required 保留，将来使用。</li><li><strong>403：Forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求。</strong></li><li><strong>404：Not Found 服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面。</strong></li><li><strong>405：Method Not Allowed 客户端请求中的方法被禁止。</strong></li><li>406：Not Acceptable 服务器无法根据客户端请求的内容特性完成请求。</li><li>407：Proxy Authentication Required 请求要求代理的身份认证，与 401 类似，但请求者应当使用代理进行授权。</li><li>408：Request Time-out 服务器等待客户端发送的请求时间过长，超时。</li><li>409：Conflict 服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突。</li><li>410：Gone 客户端请求的资源已经不存在。410 不同于 404，如果资源以前有现在被永久删除了可使用 410 代码，网站设计人员可通过 301 代码指定资源的新位置。</li><li>411：Length Required 服务器无法处理客户端发送的不带 Content-Length 的请求信息。</li><li>412：Precondition Failed 客户端请求信息的先决条件错误。</li><li>413：Request Entity Too Large 由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个 Retry-After 的响应信息。</li><li>414：Request-URI Too Large 请求的 URI 过长（URI通常为网址），服务器无法处理。</li><li>415：Unsupported Media Type 服务器无法处理请求附带的媒体格式。</li><li>416：Requested range not satisfiable 客户端请求的范围无效。</li><li>417：Expectation Failed 服务器无法满足 Expect 的请求头信息。</li></ul><p>5XX为<strong>服务端错误状态码</strong>，其中：</p><ul><li><strong>500：Internal Server Error 服务器内部错误，无法完成请求。</strong></li><li>501：Not Implemented 服务器不支持请求的功能，无法完成请求。</li><li>502：Bad Gateway 作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应。</li><li>503：Service Unavailable 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中。</li><li>504：Gateway Time-out 充当网关或代理的服务器，未及时从远端服务器获取请求。</li><li>505：HTTP Version not supported 服务器不支持请求的HTTP协议的版本，无法完成处理。</li></ul><h2 id="HTTP1-0-和-HTTP1-1-和-HTTP2-0-的区别"><a href="#HTTP1-0-和-HTTP1-1-和-HTTP2-0-的区别" class="headerlink" title="HTTP1.0 和 HTTP1.1 和 HTTP2.0 的区别"></a>HTTP1.0 和 HTTP1.1 和 HTTP2.0 的区别</h2><p>超文本传输协议（HTTP）用于浏览器与服务器之间的通信</p><h3 id="HTTP1-0-和-HTTP1-1"><a href="#HTTP1-0-和-HTTP1-1" class="headerlink" title="HTTP1.0 和 HTTP1.1"></a>HTTP1.0 和 HTTP1.1</h3><ol><li>缓存处理：</li></ol><ul><li>1.0 的 header 中主要是通过 If-Modified-Since（比较资源的最后的更新时间是否一致），expires(资源的过期时间，取决于客户端本地时间)</li><li>1.1 引入了其他的 If-Match(比较 ETag 是否一致), If-None-Match(比较 ETag 是否不一致), If-Unmodified-Since(比较资源最后的更新时间是否不一致), Entity tag(资源的匹配信息)</li></ul><ol><li>带宽优化</li></ol><ul><li>1.0 存在一些浪费带宽的现象，例如客户端只需要某个对象的一部分，但是服务器将整个对象返回。</li><li>1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content）</li></ul><ol><li>Host 头处理</li></ol><ul><li>1.0 中认为每个服务器都有一个唯一的 Ip，因此请求的 url 中并没有传递主机名（hostname）</li><li>随着虚拟化技术的发展，一台物理机上可以有多个虚拟机，共享同一个 ip，1.1 中的请求消息和响应消息都支持 Host，请求消息中如果没有 Host 头域会报告一个错误（400 Bad Request）</li></ul><ol><li>长连接</li></ol><ul><li>http 是基于 TCP&#x2F;IP 协议的，创建一个 TCP 连接是需要经过三次握手的,有一定的开销，如果每次通讯都要重新建立连接的话，对性能有影响。因此最好能维持一个长连接，可以用个长连接来发多个请求。</li><li>1.0 中每次需要使用 keep-alive 参数来告知服务器端要建立一个长连接</li><li>1.1 默认支持长连接，一定程度上弥补了 HTTP1.0 每次请求都要创建连接的缺点</li></ul><ol><li>新增状态码</li></ol><ul><li>1.1 中新增了 24 个错误状态响应码，如 409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除</li></ul><ol><li>新增请求方式</li></ol><ul><li>PUT，DELETE，OPTIONS 等</li></ul><h3 id="http2-0-与-http1-X-区别"><a href="#http2-0-与-http1-X-区别" class="headerlink" title="http2.0 与 http1.X 区别"></a>http2.0 与 http1.X 区别</h3><blockquote><p>参考链接：<a href="https://www.zhihu.com/question/34074946">HTTP&#x2F;2 相比 1.0 有哪些重大改进？</a></p></blockquote><ol><li>header 压缩: header 头部带有大量的信息，而且每次使用报头压缩，降低开销，对于相同的 header 数据，不再通过每次请求和响应发送，差量更新 HTTP 头部，既避免了重复 header 的传输，又减小了需要传输的大小</li><li>多路复用:在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序</li><li>二进制分帧:消息由一个或多个帧组成。多个帧之间可以乱序发送</li><li>服务端推送:HTTP2 引入服务器推送，允许服务端推送资源给客户端,服务器会顺便把一些客户端需要的资源一起推送到客户端</li></ol><h2 id="HTTP-与-HTTPS-的区别"><a href="#HTTP-与-HTTPS-的区别" class="headerlink" title="HTTP 与 HTTPS 的区别"></a>HTTP 与 HTTPS 的区别</h2><ol><li>HTTP 传输的数据都是未加密的，也就是明文的，HTTPS 协议是由 HTTP 和 SSL 协议构建的可进行加密传输和身份认证的网络协议，比 HTTP 协议的安全性更高。</li><li>HTTPS 协议需要 CA 证书；</li><li>使用不同的链接方式，端口也不同，一般而言，HTTP 协议的端口为 80，HTTPS 的端口为 443；</li></ol><h2 id="HTTPS-协议的工作原理"><a href="#HTTPS-协议的工作原理" class="headerlink" title="HTTPS 协议的工作原理"></a>HTTPS 协议的工作原理</h2><ol><li>客户使用 HTTPS URL 访问服务器，则要求 web 服务器建立 SSL 链接，客户端向服务器发送的报文包括客户端所支持的 ssl 版本，支持的加密算法以及密钥的长度。</li><li>web 服务器接收到客户端的请求之后，也在报文中包含 SSL 版本以及加密组件，服务器的加密组件内容时从接收到的客户端加密组件内筛选出来的。</li><li>同时，web 服务器会将网站的 CA 证书（证书中包含了公钥），返回给客户端。</li><li>客户端通过 CA 证书来验证服务端的身份，公钥是否有效，比如颁发机构，过期时间，并随机生成对称加密的密钥 X 用公钥加密发给服务端。</li><li>服务器拿到客户端发过来的加密内容用自己的私钥解密获取到密钥 X。</li><li>双方都拿到了密钥 X，SSL 通道建立完成，通过密钥 X 加密信息来进行通信。 总结：HTTPS 协议使用了非对称加密 + 对称加密的方式，即利用了非对称加密安全性高的特点，又利用了对称加密速度快，效率高的好处</li></ol><h2 id="TCP-和-UDP-之间的区别"><a href="#TCP-和-UDP-之间的区别" class="headerlink" title="TCP 和 UDP 之间的区别"></a>TCP 和 UDP 之间的区别</h2><p>TCP：传输控制协议 UDP：用户数据报协议</p><ol><li>TCP 是面向连接的，UDP 是无连接的即发送数据前不需要先建立链接；</li><li>TCP 提供可靠的服务。也就是说，通过 TCP 连接传送的数据，无差错，不丢失，不重复，且按序到达；UDP 尽最大努力交付，即不保证可靠交付。</li><li>TCP 是面向字节流，UDP 面向报文；</li><li>TCP 只能是 1 对 1 的，UDP 支持 1 对 1,1 对多；</li><li>TCP 的首部较大为 20 字节，而 UDP 只有 8 字节；</li></ol><h2 id="TCP-的三次握手"><a href="#TCP-的三次握手" class="headerlink" title="TCP 的三次握手"></a>TCP 的三次握手</h2><p><a href="https://juejin.cn/post/6844903834708344840">https://juejin.cn/post/6844903834708344840</a> 1、第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 SN(c)。此时客户端处于 SYN<em>Send 状态。 2、第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)，同时会把客户端的 ISN + 1 作为 ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 _SYN_REVD</em> 的状态。 3、第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 establised 状态。 4、服务器收到 ACK 报文之后，也处于 establised 状态，此时，双方以建立起了链接。</p><ul><li>第一次握手：客户端发送网络包，服务端收到了。这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。</li><li>第二次握手：服务端发包，客户端收到了。这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常。</li><li>第三次握手：客户端发包，服务端收到了。这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常。</li><li>如果没有第三次握手，就会出现一些丢包的情况，如果只握手 2 次，第二次握手时如果服务端发给客户端的确认报文段丢失，此时服务端已经准备好了收发数(可以理解服务端已经连接成功)据，而客户端一直没收到服务端的确认报文，所以客户端就不知道服务端是否已经准备好了(可以理解为客户端未连接成功)，这种情况下客户端不会给服务端发数据，也会忽略服务端发过来的数据。如果是三次握手，即便发生丢包也不会有问题，比如如果第三次握手客户端发的确认 ack 报文丢失，服务端在一段时间内没有收到确认 ack 报文的话就会重新进行第二次握手，也就是服务端会重发 SYN 报文段，客户端收到重发的报文段后会再次给服务端发送确认 ack 报文。</li></ul><h2 id="TCP-的四次挥手"><a href="#TCP-的四次挥手" class="headerlink" title="TCP 的四次挥手"></a>TCP 的四次挥手</h2><p>刚开始双方都处于 establised 状态，假如是客户端先发起关闭请求，则： 1、第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。 2、第二次握手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 + 1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。 3、第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。 4、第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 + 1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态 5、服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</p><ul><li>为什么客户端发送 ACK 之后不直接关闭，而是要等一阵子才关闭。这其中的原因就是，要确保服务器是否已经收到了我们的 ACK 报文，如果没有收到的话，服务器会重新发 FIN 报文给客户端，客户端再次收到 ACK 报文之后，就知道之前的 ACK 报文丢失了，然后再次发送 ACK 报文。</li></ul><h2 id="什么是浏览器的同源政策"><a href="#什么是浏览器的同源政策" class="headerlink" title="什么是浏览器的同源政策"></a>什么是浏览器的同源政策</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">我对浏览器的同源政策的理解是，一个域下的 js 脚本在未经允许的情况下，不能够访问另一个域的内容。这里的同源的指的是两个</span><br><span class="line">域的协议、域名、端口号必须相同，否则则不属于同一个域。</span><br><span class="line"></span><br><span class="line">同源政策主要限制了三个方面</span><br><span class="line"></span><br><span class="line">第一个是当前域下的 js 脚本不能够访问其他域下的 cookie、localStorage 和 indexDB。</span><br><span class="line"></span><br><span class="line">第二个是当前域下的 js 脚本不能够操作访问其他域下的 DOM。</span><br><span class="line"></span><br><span class="line">第三个是当前域下 ajax 无法发送跨域请求。</span><br><span class="line"></span><br><span class="line">同源政策的目的主要是为了保证用户的信息安全，它只是对 js 脚本的一种限制，并不是对浏览器的限制，对于一般的 img、或者</span><br><span class="line">script 脚本请求都不会有跨域的限制，这是因为这些操作都不会通过响应结果来进行可能出现安全问题的操作。</span><br></pre></td></tr></table></figure><h2 id="HTTP-请求的方式"><a href="#HTTP-请求的方式" class="headerlink" title="HTTP 请求的方式"></a>HTTP 请求的方式</h2><ol><li>GET：请求指定的页面信息，并返回实体主体。</li><li>HEAD：类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</li><li>POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和&#x2F;或已有资源的修改。</li><li>PUT：从客户端向服务器传送的数据取代指定的文档的内容。</li><li>DELETE：请求服务器删除指定的页面。</li><li>CONNECT：HTTP&#x2F;1.1 协议中预留给能够将连接改为管道方式的代理服务器。</li><li>OPTIONS：允许客户端查看服务器的性能。</li><li>TRACE：回显服务器收到的请求，主要用于测试或诊断。</li></ol><h2 id="GET-和-POST-的区别"><a href="#GET-和-POST-的区别" class="headerlink" title="GET 和 POST 的区别"></a>GET 和 POST 的区别</h2><p>两者本质上都是 TCP 链接</p><ol><li>get 参数通过 url 传递，post 放在请求体 (request body) 中。</li><li>get 请求在 url 中传递的参数是有长度限制的（该限制是由浏览器和服务器限制的），而 post 没有。</li><li>get 请求只能进行 url 编码，而 post 支持多种编码方式。</li><li>get 请求参数会被完整保留在浏览历史记录里，而 post 中的参数不会被保留。</li><li>get 产生一个 TCP 数据包；post 产生两个 TCP 数据包。 对于 get 方式的请求，浏览器会把 http header 和 data 一并发送出去，服务器响应 200（返回数据）； 而对于 post，浏览器先发送 header，服务器响应 100 continue，浏览器再发送 data，服务器响应 200 ok（返回数据）。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2022/12/CSS/"/>
      <url>/2022/12/CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h3 id="页面导入样式时，使用link和-import有什么区别？"><a href="#页面导入样式时，使用link和-import有什么区别？" class="headerlink" title="页面导入样式时，使用link和@import有什么区别？"></a>页面导入样式时，使用link和@import有什么区别？</h3><ol><li>link属于html标签，@import属于CSS</li><li>页面被加载时，link会同时被加载，而@import引用的css会等到页面被加载完再加载</li><li>link方式的样式的权重高于@import的权重</li><li>@import只在IE5以上才能识别，而link是XHTML标签，无兼容问题</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2022/12/HTML/"/>
      <url>/2022/12/HTML/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="从输入网址到页面显示"><a href="#从输入网址到页面显示" class="headerlink" title="从输入网址到页面显示"></a>从输入网址到页面显示</h3><ol><li><p>DNS（域名解析为IP）</p><ul><li><p>2种方式</p></li><li><p>DNS缓存</p></li><li><p>DNS负载均衡</p></li></ul></li><li><p>TCP连接</p><ul><li>三次握手</li><li>四次挥手</li></ul></li><li><p>返回响应结果</p></li></ol><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p>HTTP 状态码是服务器端返回给客户端的响应状态码，根据状态码我们就能知道服务器端想要给客户端表达的具体含义，比如 200 就表示请求访问成功，500 就表示服务器端程序出错等。HTTP 状态码可分为 5 大类：</p><ol><li>1XX：消息状态码。</li><li>2XX：成功状态码。</li><li>3XX：重定向状态码。</li><li>4XX：客户端错误状态码。</li><li>5XX：服务端错误状态码。</li></ol><p>这 5 大类中又包含了很多具体的状态码。</p><p>1XX为<strong>消息状态码</strong>，其中：</p><ul><li>100：Continue 继续。客户端应继续其请求。</li><li>101：Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到 HTTP 的新版本协议。</li></ul><p>2XX为<strong>成功状态码</strong>，其中：</p><ul><li><strong>200：OK 请求成功。一般用于 GET 与 POST 请求。</strong></li><li>201：Created 已创建。成功请求并创建了新的资源。</li><li>202：Accepted 已接受。已经接受请求，但未处理完成。</li><li>203：Non-Authoritative Information 非授权信息。请求成功。但返回的 meta 信息不在原始的服务器，而是一个副本。</li><li>204：No Content 无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档。</li><li>205：Reset Content 重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域。</li><li>206：Partial Content 部分内容。服务器成功处理了部分 GET 请求。</li></ul><p>3XX为<strong>重定向状态码</strong>，其中：</p><ul><li>300：Multiple Choices 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择。</li><li><strong>301：Moved Permanently 永久移动。请求的资源已被永久的移动到新 URI，返回信息会包括新的 URI，浏览器会自动定向到新 URI。今后任何新的请求都应使用新的 URI 代替。</strong></li><li><strong>302：Found 临时移动，与 301 类似。但资源只是临时被移动。客户端应继续使用原有URI。</strong></li><li>303：See Other 查看其它地址。与 301 类似。使用 GET 和 POST 请求查看。</li><li>304：<strong>Not Modified 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源。</strong></li><li>305：Use Proxy 使用代理。所请求的资源必须通过代理访问。</li><li>306：Unused 已经被废弃的 HTTP 状态码。</li><li>307：Temporary Redirect 临时重定向。与 302 类似。使用 GET 请求重定向。</li></ul><p>4XX为客户端<strong>错误状态码</strong>，其中：</p><ul><li>400：Bad Request 客户端请求的语法错误，服务器无法理解。</li><li>401：Unauthorized 请求要求用户的身份认证。</li><li>402：Payment Required 保留，将来使用。</li><li>403：Forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求。</li><li><strong>404：Not Found 服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面。</strong></li><li><strong>405：Method Not Allowed 客户端请求中的方法被禁止。</strong></li><li>406：Not Acceptable 服务器无法根据客户端请求的内容特性完成请求。</li><li>407：Proxy Authentication Required 请求要求代理的身份认证，与 401 类似，但请求者应当使用代理进行授权。</li><li>408：Request Time-out 服务器等待客户端发送的请求时间过长，超时。</li><li>409：Conflict 服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突。</li><li>410：Gone 客户端请求的资源已经不存在。410 不同于 404，如果资源以前有现在被永久删除了可使用 410 代码，网站设计人员可通过 301 代码指定资源的新位置。</li><li>411：Length Required 服务器无法处理客户端发送的不带 Content-Length 的请求信息。</li><li>412：Precondition Failed 客户端请求信息的先决条件错误。</li><li>413：Request Entity Too Large 由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个 Retry-After 的响应信息。</li><li>414：Request-URI Too Large 请求的 URI 过长（URI通常为网址），服务器无法处理。</li><li>415：Unsupported Media Type 服务器无法处理请求附带的媒体格式。</li><li>416：Requested range not satisfiable 客户端请求的范围无效。</li><li>417：Expectation Failed 服务器无法满足 Expect 的请求头信息。</li></ul><p>5XX为<strong>服务端错误状态码</strong>，其中：</p><ul><li><strong>500：Internal Server Error 服务器内部错误，无法完成请求。</strong></li><li>501：Not Implemented 服务器不支持请求的功能，无法完成请求。</li><li>502：Bad Gateway 作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应。</li><li>503：Service Unavailable 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中。</li><li>504：Gateway Time-out 充当网关或代理的服务器，未及时从远端服务器获取请求。</li><li>505：HTTP Version not supported 服务器不支持请求的HTTP协议的版本，无法完成处理。</li></ul><p><strong>总结一下</strong>：</p><p>HTTP 状态码分为 5 大类：1XX：表示消息状态码；2XX：表示成功状态码；3XX：表示重定向状态码；4XX：表示客户端错误状态码；5XX：表示服务端错误状态码。其中常见的具体状态码有：200：请求成功；301：永久重定向；302：临时重定向；404：无法找到此页面；405：请求的方法类型不支持；500：服务器内部出错。</p><h4 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h4><ol><li>强制缓存</li><li>协商缓存</li></ol><h3 id="页面渲染过程？"><a href="#页面渲染过程？" class="headerlink" title="页面渲染过程？"></a>页面渲染过程？</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/130857030">https://zhuanlan.zhihu.com/p/130857030</a></p><p><a href="https://juejin.cn/post/7145749641147973645#heading-5">https://juejin.cn/post/7145749641147973645#heading-5</a></p></blockquote><p>DOM树+CSS对象模型&#x3D;》渲染树（忽略display：none的元素等）</p><ol><li>回流（reflow）：dom（大小，位置，增减，内容改变），window大小，获取位置信息等一系列属性</li><li>重绘（repaint）：不影响元素在网页中的位置的元素样式</li></ol><h4 id="浏览器如何优化渲染？"><a href="#浏览器如何优化渲染？" class="headerlink" title="浏览器如何优化渲染？"></a>浏览器如何优化渲染？</h4><ul><li>将多次改变样式属性的操作合并成一次操作</li><li>将需要多次重排的元素，position属性设为absolute或fixed，这样此元素就脱离了文档流，它的变化不会影响到其他元素。例如有动画效果的元素就最好设置为绝对定位。</li><li>由于display属性为none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。</li></ul><h3 id="页面生命周期事件的理解"><a href="#页面生命周期事件的理解" class="headerlink" title="页面生命周期事件的理解"></a>页面生命周期事件的理解</h3><blockquote><p><a href="https://fe.ecool.fun/topic/43dad801-6c42-4638-9006-2c51a7cf0c91?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/43dad801-6c42-4638-9006-2c51a7cf0c91?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p></blockquote><p>HTML 页面的生命周期包含三个重要事件：</p><ul><li>DOMContentLoaded —— 浏览器已完全加载 HTML，并构建了 DOM 树，但像 <img> 和样式表之类的外部资源可能尚未加载完成。</li><li>load —— 浏览器不仅加载完成了 HTML，还加载完成了所有外部资源：图片，样式等。</li><li>beforeunload&#x2F;unload —— 当用户正在离开页面时。</li></ul><p>每个事件都是有用的：</p><ul><li>DOMContentLoaded 事件 —— DOM 已经就绪，因此处理程序可以查找 DOM 节点，并初始化接口。</li><li>load 事件 —— 外部资源已加载完成，样式已被应用，图片大小也已知了。</li><li>beforeunload 事件 —— 用户正在离开：我们可以检查用户是否保存了更改，并询问他是否真的要离开。</li><li>unload 事件 —— 用户几乎已经离开了，但是我们仍然可以启动一些操作，例如发送统计数据。</li></ul><h3 id="DNS-预解析是什么？怎么实现？"><a href="#DNS-预解析是什么？怎么实现？" class="headerlink" title="DNS 预解析是什么？怎么实现？"></a>DNS 预解析是什么？怎么实现？</h3><ul><li><a href="https://fe.ecool.fun/topic/d76e76c3-7400-4c6e-958a-b5f00916d47d?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/d76e76c3-7400-4c6e-958a-b5f00916d47d?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></li></ul><h3 id="跨域时怎么处理-cookie？"><a href="#跨域时怎么处理-cookie？" class="headerlink" title="跨域时怎么处理 cookie？"></a>跨域时怎么处理 cookie？</h3><ul><li><a href="https://fe.ecool.fun/topic/e41a4651-2c23-43c7-853c-cdf6039325f6?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/e41a4651-2c23-43c7-853c-cdf6039325f6?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></li></ul><h3 id="SEO相关"><a href="#SEO相关" class="headerlink" title="SEO相关"></a>SEO相关</h3><p><a href="https://fe.ecool.fun/topic/2aa4ec3d-020c-4c2e-9147-53707afb2d4e?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/2aa4ec3d-020c-4c2e-9147-53707afb2d4e?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p><p><a href="https://fe.ecool.fun/topic/255b920d-ba6d-4e6a-85ac-58c78d2e0773?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/255b920d-ba6d-4e6a-85ac-58c78d2e0773?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p><p><a href="https://fe.ecool.fun/topic/1aa28332-a1a6-4778-812f-3226a2003614?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/1aa28332-a1a6-4778-812f-3226a2003614?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p><p><a href="https://fe.ecool.fun/topic/c14803df-f552-4a23-b50d-fd8e3f77f17e?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/c14803df-f552-4a23-b50d-fd8e3f77f17e?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p><h3 id="导致页面加载白屏时间长的原因有哪些，怎么进行优化？"><a href="#导致页面加载白屏时间长的原因有哪些，怎么进行优化？" class="headerlink" title="导致页面加载白屏时间长的原因有哪些，怎么进行优化？"></a>导致页面加载白屏时间长的原因有哪些，怎么进行优化？</h3><p><a href="https://fe.ecool.fun/topic/841bfe02-d07d-45db-9e65-b9c250595d80?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/841bfe02-d07d-45db-9e65-b9c250595d80?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><h3 id="zh-cn-与-zh-hans-是什么关系、有什么区别？"><a href="#zh-cn-与-zh-hans-是什么关系、有什么区别？" class="headerlink" title="zh-cn 与 zh-hans 是什么关系、有什么区别？"></a>zh-cn 与 zh-hans 是什么关系、有什么区别？</h3><p><code>zh-cn</code>表示在中国地区所使用的中文语言，包括简体、繁体等</p><p><code>zh-hans</code>特指简体中文。</p><h3 id="常用的-meta-元素有哪些？"><a href="#常用的-meta-元素有哪些？" class="headerlink" title="常用的 meta 元素有哪些？"></a>常用的 meta 元素有哪些？</h3><blockquote><p><a href="https://fe.ecool.fun/topic/c849aa25-0dae-49aa-8148-b1c410a7aa1e?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/c849aa25-0dae-49aa-8148-b1c410a7aa1e?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">CNHP</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="charset"><a href="#charset" class="headerlink" title="charset"></a>charset</h4></li><li><h4 id="name-amp-content"><a href="#name-amp-content" class="headerlink" title="name &amp; content"></a>name &amp; content</h4><ul><li>theme-color；viewport</li><li>SEO相关（author、keywords、description）</li></ul></li><li><h4 id="http-equiv-amp-content（为http头提供属性）"><a href="#http-equiv-amp-content（为http头提供属性）" class="headerlink" title="http-equiv &amp; content（为http头提供属性）"></a>http-equiv &amp; content（为http头提供属性）</h4><ul><li>refresh；X-UA-Compatible；Cache-Control</li></ul></li><li><h4 id="property-amp-content"><a href="#property-amp-content" class="headerlink" title="property &amp; content"></a>property &amp; content</h4><ul><li>可以让网页成为一个富媒体对象，同意网页内容被其他网站引用，同时在应用的时候不会只是一个链接，会提取相应的信息展现给用户。</li></ul></li></ul><h3 id="script-标签中async-和-defer-两个属性用途与区别？"><a href="#script-标签中async-和-defer-两个属性用途与区别？" class="headerlink" title="script 标签中async 和 defer 两个属性用途与区别？"></a>script 标签中async 和 defer 两个属性用途与区别？</h3><blockquote><p><a href="https://juejin.cn/post/7063464864542359583">https://juejin.cn/post/7063464864542359583</a></p></blockquote><p>script标签用于加载脚本与执行脚本，直接使用script脚本时，html会按照顺序来加载并执行脚本，在脚本加载&amp;执行的过程中，会阻塞后续的DOM渲染。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/894d84e8a7e0497091a26e43e1a84237~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image"></p><ol><li><p><em>defer</em> 和 <em>async</em> 在网络读取（下载）这块儿是一样的，<strong>都是异步的</strong>（相较于 HTML 解析）</p></li><li><p>它俩的<strong>差别在于脚本下载完之后何时执行</strong>，显然 <em>defer</em> 是最接近我们对于应用脚本加载和执行的要求的</p></li><li><p>关于 <em><strong>defer</strong></em>，此图未尽之处在于它是<strong>按照加载顺序执行脚本</strong>的，这一点要善加利用</p></li><li><p><strong><em>async</em> 则是一个乱序执行</strong>的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行</p></li><li><p>仔细想想，<em><strong>async</strong></em> 对于应用脚本的用处不大，因为它完全<strong>不考虑依赖</strong>（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的</p></li></ol><h2 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h2><h3 id="语义化标签及优点？"><a href="#语义化标签及优点？" class="headerlink" title="语义化标签及优点？"></a>语义化标签及优点？</h3><p>语义化标签就指那些见名知意的标签，如 main,header,footer,address 等</p><p>需要值得注意的有几类，注意他们之间的区别：</p><ul><li>section &#x2F; div &#x2F; article</li><li>nav &#x2F; aside</li></ul><p>优点从两个大方面考虑：要么是对人有好处，要么是对程序有好处。</p><p>优点：</p><ul><li>方便开发人员代码维护，方便 CSS 书写</li><li>提供更好的可访问性（无障碍支持）</li><li>方便浏览器更好的识别内容，在 CSS 还未加载完毕时提供良好的样式</li><li>方便 SEO 优化</li></ul><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">samll</span>&gt;</span>  版权信息等</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span> 、<span class="tag">&lt;<span class="name">em</span>&gt;</span>  表示重要性、强调</span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span>与<span class="tag">&lt;<span class="name">figcaption</span>&gt;</span> 图表</span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">cite</span>=<span class="string">&quot;www.baidu.com&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">q</span>&gt;</span><span class="tag">&lt;/<span class="name">q</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span>  引用块与引号</span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2022-2-3&quot;</span>&gt;</span>2022-2-3<span class="tag">&lt;/<span class="name">time</span>&gt;</span> 表示时间</span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>4 、<span class="tag">&lt;<span class="name">sup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">sup</span>&gt;</span>4   上下标</span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">progress</span>&gt;</span>  进度条</span><br><span class="line"></span><br><span class="line">更多：</span><br><span class="line"> <span class="tag">&lt;<span class="name">dfn</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">abbr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">del</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ins</span>&gt;</span></span><br><span class="line">  等等</span><br></pre></td></tr></table></figure><h3 id="ARIA是什么？"><a href="#ARIA是什么？" class="headerlink" title="ARIA是什么？"></a>ARIA是什么？</h3><blockquote><p><strong>ARIA</strong> (Accessible Rich Internet Applications) 是一组属性，用于定义使残障人士更容易访问 Web 内容和 Web 应用程序（尤其是使用 JavaScript 开发的应用程序）的方法。  –MDN</p></blockquote><p>主要是使用地标角色(landmark role)，配合语义化标签以更好的支持无障碍访问。</p><p>地标角色（在标签中定义个role属性），常用取值如下：</p><ul><li>banner 横幅</li><li>navigation 导航</li><li>main 主体</li><li>complementary 补充内容</li><li>contentinfo 内容信息</li></ul><h3 id="HTML5新特性"><a href="#HTML5新特性" class="headerlink" title="HTML5新特性"></a>HTML5新特性</h3><blockquote><p><a href="https://www.cnblogs.com/vicky1018/p/7705223.html">https://www.cnblogs.com/vicky1018/p/7705223.html</a></p></blockquote><ol><li>语义化标签</li></ol><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><hrader></hrader></td><td>定义了文档的头部区域</td></tr><tr><td><footer></footer></td><td>定义了文档的尾部区域</td></tr><tr><td><nav></nav></td><td>定义文档的导航</td></tr><tr><td><section></section></td><td>定义文档中的节（section、区段）</td></tr><tr><td><article></article></td><td>定义页面独立的内容区域</td></tr><tr><td><aside></aside></td><td>定义页面的侧边栏内容</td></tr><tr><td><detailes></detailes></td><td>用于描述文档或文档某个部分的细节</td></tr><tr><td><summary></summary></td><td>标签包含 details 元素的标题</td></tr><tr><td><dialog></dialog></td><td>定义对话框，比如提示框</td></tr></tbody></table><ol start="2"><li>表单Input类型</li></ol><table><thead><tr><th>输入类型</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>主要用于选取颜色</td></tr><tr><td>date</td><td>从一个日期选择器选择一个日期</td></tr><tr><td>datetime</td><td>选择一个日期（UTC 时间）</td></tr><tr><td>datetime-local</td><td>选择一个日期和时间 (无时区)</td></tr><tr><td>email</td><td>包含 e-mail 地址的输入域</td></tr><tr><td>month</td><td>选择一个月份</td></tr><tr><td>number</td><td>数值的输入域</td></tr><tr><td>range</td><td>一定范围内数字值的输入域</td></tr><tr><td>search</td><td>用于搜索域</td></tr><tr><td>tel</td><td>定义输入电话号码字段</td></tr><tr><td>time</td><td>选择一个时间</td></tr><tr><td>url</td><td>URL 地址的输入域</td></tr><tr><td>week</td><td>选择周和年</td></tr></tbody></table><p> 　HTML5 也新增以下表单元素</p><table><thead><tr><th>表单元素</th><th>描述</th></tr></thead><tbody><tr><td><datalist></datalist></td><td>元素规定输入域的选项列表使用 <input> 元素的 list 属性与 <datalist> 元素的 id 绑定</datalist></td></tr><tr><td><keygen></td><td>提供一种验证用户的可靠方法标签规定用于表单的密钥对生成器字段。</td></tr><tr><td><output></output></td><td>用于不同类型的输出比如计算或脚本输出</td></tr></tbody></table><p>HTML5 新增的表单属性</p><ul><li>placehoder 属性，简短的提示在用户输入值前会显示在输入域上。即我们常见的输入框默认提示，在用户输入后消失。</li><li>required  属性，是一个 boolean 属性。要求填写的输入域不能为空</li><li>pattern 属性，描述了一个正则表达式用于验证<input> 元素的值。</li><li>min 和 max 属性，设置元素最小值与最大值。</li><li>step 属性，为输入域规定合法的数字间隔。</li><li>height 和 width 属性，用于 image 类型的 <input> 标签的图像高度和宽度。</li><li>autofocus 属性，是一个 boolean 属性。规定在页面加载时，域自动地获得焦点。</li><li>multiple 属性 ，是一个 boolean 属性。规定<input> 元素中可选择多个值。</li></ul><p>　</p><ol start="3"><li>视频和音频</li></ol><ul><li>HTML5 提供了播放音频文件的标准，即使用 <code>&lt;audio&gt; </code>元素</li></ul><p>control 属性供添加播放、暂停和音量控件。</p><p>　在<code>&lt;audio&gt;</code> 与 <code>&lt;/audio&gt;</code> 之间你需要插入浏览器不支持的<code>&lt;audio&gt;</code>元素的提示文本 。</p><p>　<code>&lt;audio&gt;</code> 元素允许使用多个 <code>&lt;source&gt;</code> 元素. <code>&lt;source&gt;</code> 元素可以链接不同的音频文件，浏览器将使用第一个支持的音频文件</p><p>　目前, <code>&lt;audio&gt;</code>元素支持三种音频格式文件: MP3, Wav, 和 Ogg</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">您的浏览器不支持 audio 元素。</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>HTML5 规定了一种通过 video 元素来包含视频的标准方法。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line">您的浏览器不支持Video标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  control 提供了 播放、暂停和音量控件来控制视频。也可以使用dom操作来控制视频的播放暂停，如 <code>play()</code> 和 <code>pause()</code> 方法。</p><p>  同时 video 元素也提供了 width 和 height 属性控制视频的尺寸.如果设置的高度和宽度，所需的视频空间会在页面加载时保留。如果没有设置这些属性，浏览器不知道大小的视频，浏览器就不能再加载时保留特定的空间，页面就会根据原始视频的大小而改变。</p><p>  与 标签之间插入的内容是提供给不支持 video 元素的浏览器显示的。</p><p>  video 元素支持多个source 元素. 元素可以链接不同的视频文件。浏览器将使用第一个可识别的格式（ MP4, WebM, 和 Ogg）</p><ol start="4"><li>Canvas绘图</li><li>SVG绘图</li><li>地理定位</li><li>Web Worker</li><li>拖放API</li><li>Web Storage</li></ol><ul><li>localStorage - 没有时间限制的数据存储</li><li>sessionStorage - 针对一个 session 的数据存储, 当用户关闭浏览器窗口后，数据会被删除。</li></ul><p>保存数据：localStorage.setItem(key,value);</p><p>读取数据：localStorage.getItem(key);</p><p>删除单个数据：localStorage.removeItem(key);</p><p>删除所有数据：localStorage.clear();</p><p>得到某个索引的key：localStorage.key(index);</p><ol start="10"><li><p>WebSocket</p></li><li><p>history API</p><ul><li>go、forward、back、pushstate</li></ul></li></ol><h3 id="行内元素与块级元素区别与种类？"><a href="#行内元素与块级元素区别与种类？" class="headerlink" title="行内元素与块级元素区别与种类？"></a>行内元素与块级元素区别与种类？</h3><blockquote><p>区别：<a href="https://juejin.cn/post/6964644611822190622">https://juejin.cn/post/6964644611822190622</a></p></blockquote><p>行内元素：</p><p><strong>容器</strong>（div，语义化布局标签）+ <strong>文本</strong>（h1~h6，p）+ <strong>三表</strong>（列表，表格，表单）+ <strong>三媒体</strong>（音频，视频，画布）</p><p>行内块级：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span>、<span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>空元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span> <span class="tag">&lt;<span class="name">hr</span>/&gt;</span> <span class="tag">&lt;<span class="name">img</span>/&gt;</span> <span class="tag">&lt;<span class="name">input</span>/&gt;</span> <span class="tag">&lt;<span class="name">link</span>/&gt;</span> <span class="tag">&lt;<span class="name">meta</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="如何禁用a标签跳转页面或定位链接"><a href="#如何禁用a标签跳转页面或定位链接" class="headerlink" title="如何禁用a标签跳转页面或定位链接?"></a>如何禁用a标签跳转页面或定位链接?</h3><ul><li>HTML<ul><li>href &#x3D; javascript:void(0); &#x2F; javascript:;</li><li>onclick &#x3D; “return false;”</li></ul></li><li>JS<ul><li>Event.preventDefault()</li></ul></li><li>CSS<ul><li>pointer-events: none;</li></ul></li></ul><h3 id="iframe是什么？有哪些优缺点？"><a href="#iframe是什么？有哪些优缺点？" class="headerlink" title="iframe是什么？有哪些优缺点？"></a>iframe是什么？有哪些优缺点？</h3><blockquote><p><a href="https://fe.ecool.fun/topic/06af30a2-e542-4cf0-9793-999267a4007d?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/06af30a2-e542-4cf0-9793-999267a4007d?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p></blockquote><h2 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h2><h3 id="说说-HTML、XML、XHTML-的区别"><a href="#说说-HTML、XML、XHTML-的区别" class="headerlink" title="说说 HTML、XML、XHTML 的区别"></a>说说 HTML、XML、XHTML 的区别</h3><ul><li>HTML：超文本标记语言，是语法较为松散的、不严格的Web语言；</li><li>XML：可扩展的标记语言，主要用于存储数据和结构，可扩展；</li><li>XHTML：可扩展的超文本标记语言，基于XML，作用与HTML类似，但语法更严格。</li></ul><h3 id="什么是渐进增强和优雅降级？"><a href="#什么是渐进增强和优雅降级？" class="headerlink" title="什么是渐进增强和优雅降级？"></a>什么是渐进增强和优雅降级？</h3><blockquote><p><a href="https://fe.ecool.fun/topic/79fe443f-0556-4359-8e05-804161ac48ef?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/79fe443f-0556-4359-8e05-804161ac48ef?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p></blockquote><h3 id="前端该如何选择图片的格式？"><a href="#前端该如何选择图片的格式？" class="headerlink" title="前端该如何选择图片的格式？"></a>前端该如何选择图片的格式？</h3><blockquote><p><a href="https://fe.ecool.fun/topic/55ba9331-1165-4b0e-baba-dc9a6378a8fb?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/55ba9331-1165-4b0e-baba-dc9a6378a8fb?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p></blockquote><h3 id="html和css中的图片加载与渲染规则是什么样的？"><a href="#html和css中的图片加载与渲染规则是什么样的？" class="headerlink" title="html和css中的图片加载与渲染规则是什么样的？"></a>html和css中的图片加载与渲染规则是什么样的？</h3><blockquote><p><a href="https://fe.ecool.fun/topic/5b612b6a-3828-4cd9-9de4-b05bb36a4e3d?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/5b612b6a-3828-4cd9-9de4-b05bb36a4e3d?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p></blockquote><h3 id="一台设备的dpr，是否是可变的？"><a href="#一台设备的dpr，是否是可变的？" class="headerlink" title="一台设备的dpr，是否是可变的？"></a>一台设备的dpr，是否是可变的？</h3><blockquote><p><a href="https://fe.ecool.fun/topic/8dad4e08-b8b7-4593-bb5e-8df4d4b14499?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/8dad4e08-b8b7-4593-bb5e-8df4d4b14499?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p></blockquote><h3 id="iconfont是什么？有什么优缺点？"><a href="#iconfont是什么？有什么优缺点？" class="headerlink" title="iconfont是什么？有什么优缺点？"></a>iconfont是什么？有什么优缺点？</h3><blockquote><p><a href="https://fe.ecool.fun/topic/ece0e4b9-112c-4d3c-934c-822e8807fe46?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/ece0e4b9-112c-4d3c-934c-822e8807fe46?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p></blockquote><h3 id="怎样触发拍照功能？"><a href="#怎样触发拍照功能？" class="headerlink" title="怎样触发拍照功能？"></a>怎样触发拍照功能？</h3><blockquote><p><a href="https://juejin.cn/post/6902357766141116430#heading-2">https://juejin.cn/post/6902357766141116430#heading-2</a></p></blockquote><h3 id="如何实现浏览器内多个标签页之间的通信？"><a href="#如何实现浏览器内多个标签页之间的通信？" class="headerlink" title="如何实现浏览器内多个标签页之间的通信？"></a>如何实现浏览器内多个标签页之间的通信？</h3><blockquote><p><a href="https://fe.ecool.fun/topic/833fba72-1614-4502-adc3-1f5593ae6560?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/833fba72-1614-4502-adc3-1f5593ae6560?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p><p><a href="https://blog.csdn.net/weixin_46399753/article/details/105211771">https://blog.csdn.net/weixin_46399753/article/details/105211771</a></p><p><a href="https://fe.ecool.fun/topic/16cd86d3-cdc5-4c8c-946b-19f72408525f?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/16cd86d3-cdc5-4c8c-946b-19f72408525f?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p></blockquote><h3 id="js和css是如何影响DOM树构建的？"><a href="#js和css是如何影响DOM树构建的？" class="headerlink" title="js和css是如何影响DOM树构建的？"></a>js和css是如何影响DOM树构建的？</h3><blockquote><p><a href="https://fe.ecool.fun/topic/9c119d14-fe3b-4f23-9a51-222c50529890?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/9c119d14-fe3b-4f23-9a51-222c50529890?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p></blockquote><h3 id="img的srcset属性的作⽤？"><a href="#img的srcset属性的作⽤？" class="headerlink" title="img的srcset属性的作⽤？"></a>img的srcset属性的作⽤？</h3><blockquote><p><a href="https://fe.ecool.fun/topic/072b9f8d-7383-4823-9508-77e4e9d1744c?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/072b9f8d-7383-4823-9508-77e4e9d1744c?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p></blockquote><h3 id="实现轮播图"><a href="#实现轮播图" class="headerlink" title="实现轮播图"></a>实现轮播图</h3><p><a href="https://fe.ecool.fun/topic/983ff108-fded-4272-96b6-24a0a20af286?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/983ff108-fded-4272-96b6-24a0a20af286?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p><h3 id="怎么实现“点击回到顶部”的功能？"><a href="#怎么实现“点击回到顶部”的功能？" class="headerlink" title="怎么实现“点击回到顶部”的功能？"></a>怎么实现“点击回到顶部”的功能？</h3><p><a href="https://fe.ecool.fun/topic/82f034bf-f411-4569-b442-af7b6c229eb9?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/82f034bf-f411-4569-b442-af7b6c229eb9?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p><h3 id="假设我要上传图片，怎么在选择图片后，通过浏览器预览待上传的图片？"><a href="#假设我要上传图片，怎么在选择图片后，通过浏览器预览待上传的图片？" class="headerlink" title="假设我要上传图片，怎么在选择图片后，通过浏览器预览待上传的图片？"></a>假设我要上传图片，怎么在选择图片后，通过浏览器预览待上传的图片？</h3><p><a href="https://fe.ecool.fun/topic/cb703abf-4024-4ad1-8135-782ef6afe339?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/cb703abf-4024-4ad1-8135-782ef6afe339?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p><h3 id="渐进式jpg有了解过吗？"><a href="#渐进式jpg有了解过吗？" class="headerlink" title="渐进式jpg有了解过吗？"></a>渐进式jpg有了解过吗？</h3><p><a href="https://fe.ecool.fun/topic/987220ea-bf52-48ea-a6bd-106e97167e81?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/987220ea-bf52-48ea-a6bd-106e97167e81?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p><h3 id="如何控制-input-输入框的输入字数？"><a href="#如何控制-input-输入框的输入字数？" class="headerlink" title="如何控制 input 输入框的输入字数？"></a>如何控制 input 输入框的输入字数？</h3><input maxlength="5"><h2 id="待详细了解"><a href="#待详细了解" class="headerlink" title="待详细了解"></a>待详细了解</h2><ol><li><p>Canvas</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial">https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial</a></p><p><a href="https://fe.ecool.fun/topic/c8a51567-945f-461d-b632-0209dd1917f5?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/c8a51567-945f-461d-b632-0209dd1917f5?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p></li><li><p>WebSocket</p></li><li><p>拖放API</p><p><a href="https://fe.ecool.fun/topic/969cddcd-b1ac-4285-86f6-ae0a8eaf828a?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/969cddcd-b1ac-4285-86f6-ae0a8eaf828a?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></p></li><li><p>Web Worker</p><ul><li>webSocket如何兼容低浏览器【<a href="https://fe.ecool.fun/topic/9f860d42-8504-4562-8b9a-4a415ba5782a?orderBy=updateTime&amp;order=asc&amp;tagId=12%E3%80%91">https://fe.ecool.fun/topic/9f860d42-8504-4562-8b9a-4a415ba5782a?orderBy=updateTime&amp;order=asc&amp;tagId=12】</a></li><li>对 web worker 的了解【<a href="https://fe.ecool.fun/topic/a15e1f98-3fdd-4398-b707-0a24fe92c608?orderBy=updateTime&amp;order=asc&amp;tagId=12%E3%80%91">https://fe.ecool.fun/topic/a15e1f98-3fdd-4398-b707-0a24fe92c608?orderBy=updateTime&amp;order=asc&amp;tagId=12】</a></li></ul></li><li><p>Navigator.sendBeacon()</p></li><li><p>离线储存</p><ul><li><a href="https://fe.ecool.fun/topic/d2d8725c-7941-4ba8-9b92-67a730fa1097?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/d2d8725c-7941-4ba8-9b92-67a730fa1097?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></li><li><a href="https://fe.ecool.fun/topic/93ffefee-3471-48a5-b60c-1b7adf8edf13?orderBy=updateTime&amp;order=asc&amp;tagId=12">https://fe.ecool.fun/topic/93ffefee-3471-48a5-b60c-1b7adf8edf13?orderBy=updateTime&amp;order=asc&amp;tagId=12</a></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2022/12/HTML%E5%B1%9E%E6%80%A7/"/>
      <url>/2022/12/HTML%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h1><h3 id="1-Multiple"><a href="#1-Multiple" class="headerlink" title="1. Multiple"></a>1. Multiple</h3><p><code>multiple</code> 属性是一个布尔值，允许用户在 <code>&lt;input&gt;</code> 标签操作，<code>&lt;input&gt;</code> 标签的类型 <code>type</code> 是 <code>file</code> 或者 <code>email</code>。当然，你也可以用在 <code>&lt;select&gt;</code> 标签。</p><p>对于 <code>email</code> 类型的 <code>&lt;input&gt;</code>，添加上 <code>multiple</code> 属性，你输入的邮箱值需要用 <code>,</code> 分隔开，内容不允许有空格。</p><p>对于 <code>file</code> 类型的 <code>&lt;input&gt;</code>，你可以多选文件上传。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-Accept"><a href="#2-Accept" class="headerlink" title="2. Accept"></a>2. Accept</h3><p><code>&lt;input&gt;</code> 元素有 <code>accept</code> 属性，它允许你指明上传文件 <code>file</code> 的类型。</p><p>你需要通过 <code>,</code> 来分割文件类型。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;.png, .jpg&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然，你还可以使用它上传音频或视频。</p><h3 id="3-Contenteditable"><a href="#3-Contenteditable" class="headerlink" title="3. Contenteditable"></a>3. Contenteditable</h3><p><code>contenteditable</code> 是一个全局的属性（对于所有的 HTML 元素都适用），它可以使得 <code>HTML</code> 的可被用户编辑。</p><p><strong>需要注意的是，它仅对可见内容和DOM的内容进行更改。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">contenteditable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>I&#x27;m a cool editable div ;)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ecf1fe5688942b8b4782a20d53d046d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="contenteditable.gif"></p><blockquote><p>当然，如果你想使得整个文档的内容都可以编辑，你可以直接使用 <code>document.designMode = &quot;on&quot;</code>，关闭编辑则使用 <code>document.designMode = &quot;off&quot;</code>。如果你想保存整个文档或者某个编辑内容，可以直接通过 DOM 操作完成。</p></blockquote><h3 id="4-Spellcheck"><a href="#4-Spellcheck" class="headerlink" title="4. Spellcheck"></a>4. Spellcheck</h3><p><code>spellcheck</code> 也是一个全局的属性，可以检验 <code>HTML</code> 内容是否有拼写的语法错误，你可以用在 <code>input</code> 或其他元素上。</p><p>⚠️注意：通常不检查不可编辑元素的拼写错误，即使 <code>spellcheck</code> 被设置为 <code>true</code> 并且浏览器支持检查。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 不检查 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">spellcheck</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">Thanks furr checkinng my speling :)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 检查 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">contenteditable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">spellcheck</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">Thanks furr checkinng my speling :)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-Translate"><a href="#5-Translate" class="headerlink" title="5. Translate"></a>5. Translate</h3><p><code>translate</code> 告诉浏览器指定的内容是否应该被翻译。</p><p>比如：你想阻止谷歌自动翻译你公司名称或者品牌名称。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">translate</span>=<span class="string">&quot;no&quot;</span>&gt;</span>LearnPine<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-Poster"><a href="#6-Poster" class="headerlink" title="6. Poster"></a>6. Poster</h3><p>当视频正在加载中或者当用户开始播放视频前，我们可以用 <code>poster</code> 属性设定指定的视频海报。</p><p>如果 <code>poster</code> 未指定图片，则视频的第一帧可用之后作为海报显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> </span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">&quot;https://bit.ly/3nWh78w&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">poster</span>=<span class="string">&quot;posterImage.png&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-Download"><a href="#7-Download" class="headerlink" title="7. Download"></a>7. Download</h3><p><code>download</code> 属性结合 <code>&lt;a&gt;</code> 元素，告诉浏览器下载的 <code>URL</code>，而不是导航到它，提示用户将其下载到本地。</p><p>你还可以命名文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index.html&quot;</span> <span class="attr">download</span>=<span class="string">&quot;fileName&quot;</span>&gt;</span>Download me :)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>url 指向 video，image 资源，不会直接下载，会进行跳转</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用学习（理论篇）</title>
      <link href="/2022/11/Git%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%90%86%E8%AE%BA%E7%AF%87%EF%BC%89/"/>
      <url>/2022/11/Git%E4%BD%BF%E7%94%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E7%90%86%E8%AE%BA%E7%AF%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="理论篇"><a href="#理论篇" class="headerlink" title="理论篇"></a>理论篇</h1><h1 id="Git区域"><a href="#Git区域" class="headerlink" title="Git区域"></a>Git区域</h1><p>工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git Directory)。<br>如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。</p><ul><li><code>Workspace</code>：工作区，就是你平时存放项目代码的地方</li><li><code>Stage/Index</code>：暂存区，用于临时存放你的改动，<strong>事实上它只是一个文件，保存即将提交的文件列表信息</strong></li><li><code>Repository</code>：本地仓库，就是安全存放数据的位置，这里面有你提交到所有版本的数据。<strong>其中HEAD默认指向最新放入仓库的版本</strong></li><li><code>Remote</code>：远程仓库，托管代码的服务器</li></ul><hr><p>本地的三个区域确切的说应该是git仓库中<strong>HEAD指向的版本</strong>：</p><ul><li><code>WorkSpace</code>：需要通过Git进行版本控制的目录(.git)和文件，这些目录和文件组成了工作空间<ul><li>Directory（项目目录）：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间</li><li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建</li><li>Stash：隐藏，是一个工作状态保存栈，用于保存&#x2F;恢复WorkSpace中的临时状态</li></ul></li><li><code>Index/Stage</code>：暂存区，或者叫待提交更新区，在提交进入仓库之前，我们可以把所有的更新放在暂存区</li><li><code>Repository</code>：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）</li></ul><h2 id="git-文件夹"><a href="#git-文件夹" class="headerlink" title=".git 文件夹"></a><strong><code>.git</code> 文件夹</strong></h2><table><thead><tr><th>文件名</th><th>作用</th></tr></thead><tbody><tr><td>hooks（钩）</td><td>存放一些shell脚本</td></tr><tr><td>Info</td><td>exclude（排除）**：存放仓库的一些信息</td></tr><tr><td>logs</td><td>保存所有更新的引用记录（目录下HEAD及下级的master）</td></tr><tr><td>文件格式：上次提交哈希值本次提交格式用户名邮箱Linux时间时区提交信息</td><td></td></tr><tr><td>objects</td><td>存放所有的git对象（即每个版本的内容）</td></tr><tr><td>refs：heads：</td><td>保存当前最新的一次提交的哈希值</td></tr><tr><td>COMMIT_EDITMSG</td><td>最新提交的一次Commit Message，git系统不会用到，给用户一个参考</td></tr><tr><td>config</td><td>git仓库的配置文件</td></tr><tr><td>description</td><td>仓库的描述信息，主要给gitweb等git托管系统使用</td></tr><tr><td>HEAD</td><td>映射到ref引用，能够找到下一次commit**的前一次哈希值（即当前的哈希值）</td></tr><tr><td>index</td><td>暂存区（stage**），一个二进制文件</td></tr><tr><td>ORIG_HEAD</td><td>HEAD指针的前一个状态（哈希值）</td></tr><tr><td>FETCH_HEAD</td><td>是一个版本链接，指向着目前已经从远程仓库取下来的分支的末端版本</td></tr><tr><td>packed-refs</td><td>当更新一个引用时，git不会packed-refs，而是会在refs&#x2F;heads下写入一个新文件。当查找一个引用时，git首先在refs目录下查找，如果未找到则到packed-refs文件中去查找。</td></tr></tbody></table><h1 id="Git文件"><a href="#Git文件" class="headerlink" title="Git文件"></a><strong>Git文件</strong></h1><h2 id="文件的四种状态"><a href="#文件的四种状态" class="headerlink" title="文件的四种状态"></a><strong>文件的四种状态</strong></h2><p>📌 版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><ul><li><strong><code>Untracked</code></strong>: <strong>未跟踪</strong>, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制<ul><li>通过 git add 状态变为<code>*Staged*</code></li></ul></li><li><code>**Unmodify**</code>: 文件<strong>已经入库, 未修改</strong>, 即版本库中的文件快照内容与文件夹中完全一致<ul><li>这种类型的文件有两种去处, 如果它被修改, 而变为<code>*Modified*</code>. 如果使用 git rm 移出版本库, 则成为<code>*Untracked*</code>文件</li></ul></li><li><code>**Modified**</code>: 文件<strong>已修改</strong>，仅仅是修改，并没有进行其他的操作<ol><li>这个文件也有两个去处, 通过 git add 可进入暂存<code>*staged*</code>状态</li><li>使用 git checkout 则丢弃修改过, 返回到<code>*unmodify*</code>状态, 这个 git checkout 即从库中取出文件, 覆盖当前修改</li></ol></li><li><code>**Staged**</code>: <strong>暂存状态</strong><ol><li>执行 git commit 则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为<code>*Unmodify*</code>状态</li><li>执行 git reset HEAD filename 取消暂存, 文件状态为*<code>Modified</code>*</li></ol></li></ul><h2 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a><strong>查看文件状态</strong></h2><p>上面说文件有4种状态，通过如下命令可以查看到文件的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看指定文件状态</span></span><br><span class="line">git status [filename]</span><br><span class="line"><span class="comment"># 查看所有文件状态</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 添加所有文件到暂存区</span></span><br><span class="line">git add .                  </span><br><span class="line"><span class="comment"># 提交暂存区中的内容到本地仓库 -m 提交信息</span></span><br><span class="line">git commit -m <span class="string">&quot;消息内容&quot;</span></span><br></pre></td></tr></table></figure><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a><strong>忽略文件</strong></h2><ul><li>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</li><li>忽略文件的原则是：<ol><li>忽略操作<strong>系统自动生成的文件</strong>，比如缩略图等；</li><li>忽略<strong>编译生成的</strong>中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的<code>.class</code>文件；</li><li>忽略你自己的<strong>带有敏感信息的配置文件</strong>，比如存放口令的配置文件。</li></ol></li><li>在项目目录下建立”$<strong><code>.gitignore</code></strong>$”文件，规则如下：<ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略</li><li>可以使用Linux通配符<ol><li>星号（*）代表任意多个字符</li><li>问号（？）代表一个字符</li><li>方括号（[abc]）代表可选字符范围</li><li>大括号（{string1,string2,…}）代表可选的字符串等。</li></ol></li><li>名称前有<strong>感叹号（!），表示例外规则，</strong>将不被忽略。</li><li>名称前有<strong>路径分隔符（&#x2F;）</strong>，表示要忽略的文件在此<strong>目录</strong>下，而<strong>子目录中的文件不忽略</strong></li><li>名称最后有路径分隔符（&#x2F;），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为注释</span></span><br><span class="line">*.txt        <span class="comment">#忽略所有.txt结尾的文件</span></span><br><span class="line">!lib.txt     <span class="comment">#但lib.txt除外</span></span><br><span class="line">/temp        <span class="comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span><br><span class="line">build/       <span class="comment">#忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt    <span class="comment">#会忽略 doc/bb.txt 但不包括 doc/aa/bb.txt</span></span><br></pre></td></tr></table></figure><h1 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h1><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a><strong>分支管理策略</strong></h2><p>通常，合并分支时，<strong>如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</strong></p><p>如果要<strong>强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit</strong>，这样，从分支历史上就可以看出分支信息。</p><h2 id="分支合并冲突"><a href="#分支合并冲突" class="headerlink" title="分支合并冲突"></a><strong>分支合并冲突</strong></h2><p><strong>如果同一个文件在合并分支时都被修改了则会引起冲突：解决的办法是我们可以修改冲突文件后重新提交！选择要保留他的代码还是你的代码！</strong></p><ul><li>进行合并时发生冲突，合并模式将会变为**<code>Auto-forward</code>**（不冲突情况下默认为<code>**Fast-forward**</code>），会保留两者冲突的内容<ul><li><strong><code>Fast-forward</code><strong>模式即“</strong>快进模式</strong>”，直接把master指向dev的当前提交，所以合并速度非常快</li></ul></li><li>冲突的部分需要进行手动进行选择，修改好文件后需要进行add 和 commit操作将其同步到本地库</li></ul><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a><strong>工作流程</strong></h1><p>git的工作流程一般是这样的：</p><p>１、在工作目录中添加、修改文件；（工作区变更）</p><p>２、将需要进行版本管理的文件放入暂存区域；（变更提交至暂存区）</p><p>３、将暂存区域的文件提交到git仓库。（暂存区提交本地仓库）</p><p>因此，git管理的文件有三种状态：<strong>已修改（modified）,已暂存（staged）,已提交(committed)</strong></p><h1 id="SVN与GIT"><a href="#SVN与GIT" class="headerlink" title="SVN与GIT"></a><strong>SVN与GIT</strong></h1><h3 id="SVN-集中式版本控制系统"><a href="#SVN-集中式版本控制系统" class="headerlink" title="SVN 集中式版本控制系统"></a><strong>SVN 集中式版本控制系统</strong></h3><p>必须联网从中央服务器上拉取最新的代码，完成后还需要将代码提交</p><h3 id="Git-分布式版本控制系统"><a href="#Git-分布式版本控制系统" class="headerlink" title="Git 分布式版本控制系统"></a><strong>Git 分布式版本控制系统</strong></h3><p>每个人本地都有一份，可通过push操作将代码推送至服务器,当然也可以没有中央服务器（则需要双方直接进行数据交换）</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Liunx命令记录</title>
      <link href="/2022/11/%E5%B8%B8%E7%94%A8Liunx%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/11/%E5%B8%B8%E7%94%A8Liunx%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><p>今天在进行github相关操作时，需要进行.gitignore文件的创建和修改，遂对liux下的文件创建进行记录。<a href="https://cloud.tencent.com/developer/article/1858594">参考链接</a>。</p><h3 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a><code>touch</code>命令</h3><ul><li>更新现有的文件和目录的时间戳</li><li>创建新的空文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> file.txt</span><br></pre></td></tr></table></figure><h3 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a><code>cat</code>命令</h3><ul><li>读取和链接文件</li><li>创建新文件<ul><li>运行cat命令，后跟重定向操作符<code>&gt;</code>和要创建的文件名。按<code>Enter</code>输入文字，完成后按<code>CRTL+D</code>保存文件。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; file.txt</span><br></pre></td></tr></table></figure><h3 id="使用重定向运算符创建文件"><a href="#使用重定向运算符创建文件" class="headerlink" title="使用重定向运算符创建文件"></a><strong>使用重定向运算符创建文件</strong></h3><p>重定向允许您捕获命令的输出，并将其作为输入发送到另一个命令或文件。有两种方法可以将输出重定向到文件。<code>&gt;</code> 操作符将覆盖现有文件，而<code>&gt;&gt;</code> 操作符将追加输出到文件中。</p><p>要创建一个空的零长度文件，只需在重定向操作符之前指定要创建的文件名即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; file1.<span class="property">txt</span></span><br></pre></td></tr></table></figure><h2 id="使用echo命令创建文件"><a href="#使用echo命令创建文件" class="headerlink" title="使用echo命令创建文件"></a><strong>使用echo命令创建文件</strong></h2><p>所述echo命令的标准输出，其传递的字符串可以被重定向到文件。</p><p>要创建新文件，请运行echo命令，后跟要打印的文本，然后使用重定向操作符<code>&gt;</code>将输出写入要创建的文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&quot;Some line&quot;</span> &gt; file1.<span class="property">txt</span></span><br></pre></td></tr></table></figure><h2 id="使用Heredoc创建文件"><a href="#使用Heredoc创建文件" class="headerlink" title="使用Heredoc创建文件"></a><strong>使用Heredoc创建文件</strong></h2><p>这里document或Heredoc是一种重定向类型，允许您将多行输入传递给命令。</p><p>当您要从Shell脚本创建包含多行文本的文件时，通常使用此方法。</p><p>例如，要创建一个新文件，<code>file1.txt</code>您将使用以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt; <span class="variable constant_">EOF</span> &gt; file1.<span class="property">txtSome</span> lineSome other lineEOF</span><br></pre></td></tr></table></figure><p>Heredoc的正文可以包含变量，特殊字符和命令。</p><h3 id="创建一个大文件"><a href="#创建一个大文件" class="headerlink" title="创建一个大文件"></a><strong>创建一个大文件</strong></h3><p>有时，出于测试目的，您可能需要创建一个<a href="https://cloud.tencent.com/solution/bigdata?from=10680">大数据</a>文件。当您要测试驱动器的写入速度或测试连接的下载速度时，此功能很有用。</p><h4 id="使用dd命令"><a href="#使用dd命令" class="headerlink" title="使用dd命令"></a><strong>使用<code>dd</code>命令</strong></h4><p><code>dd</code>命令主要用于转换和复制文件。</p><p>要创建一个<code>1G.test</code>大小为1GB 的文件，请运行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=<span class="regexp">/dev/</span>zero <span class="keyword">of</span>=1G.<span class="property">test</span> bs=<span class="number">1</span> count=<span class="number">0</span> seek=1G</span><br></pre></td></tr></table></figure><h4 id="使用fallocate命令"><a href="#使用fallocate命令" class="headerlink" title="使用fallocate命令"></a><strong>使用<code>fallocate</code>命令</strong></h4><p><code>fallocate</code> 一个命令行实用程序，用于为文件分配实际磁盘空间。</p><p>以下命令将创建一个名为<code>1G.test</code>1GB 的新文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fallocate -l 1G 1G.<span class="property">test</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS常见面试题总结，持续更新～</title>
      <link href="/2022/11/JS/"/>
      <url>/2022/11/JS/</url>
      
        <content type="html"><![CDATA[<h2 id="第1题：var、let、const之间有什么区别？"><a href="#第1题：var、let、const之间有什么区别？" class="headerlink" title="第1题：var、let、const之间有什么区别？"></a>第1题：var、let、const之间有什么区别？</h2><ul><li><p>var </p><ul><li>声明全局变量（若是在单个的JS文件中，会存在一个神奇的局部变量）</li><li>变量提升，提前应用会取出undefined</li><li>函数作用域</li></ul></li><li><p>let</p><ul><li>局部变量</li><li>不会变量提升，存在暂时性死区</li><li>块级作用域</li></ul></li><li><p>const</p><ul><li><p>局部变量</p></li><li><p>不会变量提升，存在暂时性死区</p></li><li><p>块级作用域</p></li><li><p>创建后不能进行更改（不是指对象这种不能更改）</p></li><li><p>赋初始值不能为空</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown及Typora使用教程</title>
      <link href="/2022/11/Markdown%E5%8F%8ATypora%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2022/11/Markdown%E5%8F%8ATypora%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown语法规则"><a href="#MarkDown语法规则" class="headerlink" title="MarkDown语法规则"></a>MarkDown语法规则</h1><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h2><p>使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 <strong>#</strong> 号，二级标题对应两个 <strong>#</strong> 号，以此类推。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h2 id="2-段落格式"><a href="#2-段落格式" class="headerlink" title="2. 段落格式"></a>2. 段落格式</h2><h2 id="2-1-段落"><a href="#2-1-段落" class="headerlink" title="2.1 段落"></a>2.1 段落</h2><p><strong>段落的换行是使用两个以上空格加上回车</strong>。</p><p>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p><h3 id="2-2-字体"><a href="#2-2-字体" class="headerlink" title="2.2 字体"></a>2.2 字体</h3><p>Markdown 可以使用以下几种字体：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本*//推荐</span><br><span class="line">_斜体文本_</span><br><span class="line">**粗体文本**</span><br><span class="line">__粗体文本__</span><br><span class="line">***粗斜体文本***</span><br><span class="line">___粗斜体文本___</span><br></pre></td></tr></table></figure><h3 id="2-3-分隔线"><a href="#2-3-分隔线" class="headerlink" title="2.3 分隔线"></a>2.3 分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">* * *</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - - //推荐</span><br><span class="line"></span><br><span class="line">----------</span><br></pre></td></tr></table></figure><h3 id="2-4-删除线"><a href="#2-4-删除线" class="headerlink" title="2.4 删除线"></a>2.4 删除线</h3><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <strong>~~</strong> 即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~BAIDU.COM~~</span><br></pre></td></tr></table></figure><p><del>BAIDU.COM</del></p><h3 id="2-5-下划线"><a href="#2-5-下划线" class="headerlink" title="2.5 下划线"></a>2.5 下划线</h3><p>下划线可以通过 HTML 的 <strong><u></u></strong> 标签来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;带下划线文本&lt;/u&gt;</span><br></pre></td></tr></table></figure><p><u>带下划线文本</u></p><h3 id="2-6-脚注"><a href="#2-6-脚注" class="headerlink" title="2.6 脚注"></a>2.6 脚注</h3><p>脚注是对文本的补充说明。</p><p>Markdown 脚注的格式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^要注明的文本]</span><br></pre></td></tr></table></figure><p>以下实例演示了脚注的用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建脚注格式类似这样 [^RUNOOB]。</span><br><span class="line">[^RUNOOB]: 菜鸟教程 -- 学的不仅是技术，更是梦想！！！</span><br></pre></td></tr></table></figure><p>创建脚注格式类似这样 [^RUNOOB]。</p><p>[^RUNOOB]: 菜鸟教程 – 学的不仅是技术，更是梦想！！！</p><h2 id="3-列表"><a href="#3-列表" class="headerlink" title="3. 列表"></a>3. 列表</h2><h3 id="3-1-无序列表"><a href="#3-1-无序列表" class="headerlink" title="3.1 无序列表"></a>3.1 无序列表</h3><p>无序列表使用星号(<em>****)、加号(<strong>+</strong>)或是减号(</em>*-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 第一项//推荐</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure><h3 id="3-2-有序列表"><a href="#3-2-有序列表" class="headerlink" title="3.2 有序列表"></a>3.2 有序列表</h3><p>有序列表使用数字并加上 <strong>.</strong> 号来表示，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure><h3 id="3-3-列表嵌套"><a href="#3-3-列表嵌套" class="headerlink" title="3.3 列表嵌套"></a>3.3 列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><ol><li><p>第一项：</p><ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li><p>第二项：</p><ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h2 id="4-区块"><a href="#4-区块" class="headerlink" title="4. 区块"></a>4. 区块</h2><p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 区块引用</span><br></pre></td></tr></table></figure><blockquote><p>区块引用</p></blockquote><p>另外区块是可以嵌套的，一个 <strong>&gt;</strong> 符号是最外层，两个 <strong>&gt;</strong> 符号是第一层嵌套，以此类推：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 最外层</span><br><span class="line">&gt; &gt; 第一层嵌套</span><br><span class="line">&gt; &gt; &gt; 第二层嵌套</span><br></pre></td></tr></table></figure><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><p>区块可和列表配合使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">    &gt; 菜鸟教程</span><br><span class="line">    &gt; 学的不仅是技术更是梦想</span><br><span class="line">* 第二项</span><br></pre></td></tr></table></figure><h2 id="5-代码"><a href="#5-代码" class="headerlink" title="5. 代码"></a>5. 代码</h2><h3 id="5-1-代码段"><a href="#5-1-代码段" class="headerlink" title="5.1 代码段"></a>5.1 代码段</h3><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（**&#96;**），例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`printf()` 函数</span><br></pre></td></tr></table></figure><h3 id="5-2-代码块"><a href="#5-2-代码块" class="headerlink" title="5.2 代码块"></a>5.2 代码块</h3><p>代码区块使用 <strong>4 个空格</strong>或者一个<strong>制表符（Tab 键）</strong>。—–用来展示一行不指定语言类型的代码</p><p><strong>用 &#96;&#96;&#96; 包裹一段代码，并指定一种语言（也可以不指定）</strong></p><h2 id="6-链接"><a href="#6-链接" class="headerlink" title="6. 链接"></a>6. 链接</h2><h3 id="常用链接方式"><a href="#常用链接方式" class="headerlink" title="常用链接方式"></a>常用链接方式</h3><p>链接使用方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [菜鸟教程](https://www.baidu.com)</span><br></pre></td></tr></table></figure><p>这是一个链接 <a href="https://www.runoob.com/">菜鸟教程</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;https://www.baidu.com&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/">https://www.baidu.com</a></p><h3 id="高级链接方式"><a href="#高级链接方式" class="headerlink" title="高级链接方式"></a>高级链接方式</h3><p>我们可以通过变量来设置一个链接，变量赋值在文档末尾进行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [Google][1]</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">  [1]: http://www.google.com/</span><br></pre></td></tr></table></figure><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>然后在文档的结尾为变量赋值（网址）</p><h2 id="7-图片"><a href="#7-图片" class="headerlink" title="7. 图片"></a>7. 图片</h2><p>Markdown 图片语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line"></span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure><ul><li>开头一个感叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li></ul><p>注：没有办法指定图片的高度与宽度</p><h2 id="8-表格"><a href="#8-表格" class="headerlink" title="8. 表格"></a>8. 表格</h2><p>Markdown 制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p><p>语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h3 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h3><p><strong>我们可以设置表格的对齐方式：</strong></p><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><p>实例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><h2 id="9-技巧"><a href="#9-技巧" class="headerlink" title="9.技巧"></a>9.技巧</h2><h3 id="9-1-转义"><a href="#9-1-转义" class="headerlink" title="9.1 转义"></a>9.1 转义</h3><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**文本加粗** </span><br><span class="line">\*\* 正常显示星号 \*\*</span><br></pre></td></tr></table></figure><h3 id="9-2-流程图制作"><a href="#9-2-流程图制作" class="headerlink" title="9.2 流程图制作"></a>9.2 流程图制作</h3><p>1、横向流程图源码格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure><p>2、竖向流程图源码格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt; |a=1| D[结果1]</span><br><span class="line">    C --&gt; |a=2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br></pre></td></tr></table></figure><p>3、标准流程图源码格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><p>4、标准流程图源码格式（横向）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><p>5、UML时序图源码样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure><p>6、UML时序图源码复杂样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Title: 标题：复杂使用</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人陪我玩</span><br></pre></td></tr></table></figure><p>7、UML标准时序图样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line">  sequenceDiagram</span><br><span class="line">    participant 张三</span><br><span class="line">    participant 李四</span><br><span class="line">    张三-&gt;王五: 王五你好吗？</span><br><span class="line">    loop 健康检查</span><br><span class="line">        王五-&gt;王五: 与疾病战斗</span><br><span class="line">    end</span><br><span class="line">    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...</span><br><span class="line">    李四--&gt;&gt;张三: 很好!</span><br><span class="line">    王五-&gt;李四: 你怎么样?</span><br><span class="line">    李四--&gt;王五: 很好!</span><br></pre></td></tr></table></figure><p>8、甘特图样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">        gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title 软件开发甘特图</span><br><span class="line">        section 设计</span><br><span class="line">        需求                      :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        原型                      :active,  des2, 2014-01-09, 3d</span><br><span class="line">        UI设计                     :         des3, after des2, 5d</span><br><span class="line">    未来任务                     :         des4, after des3, 5d</span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求                      :crit, done, 2014-01-06,24h</span><br><span class="line">        设计框架                             :crit, done, after des2, 2d</span><br><span class="line">        开发                                 :crit, active, 3d</span><br><span class="line">        未来任务                              :crit, 5d</span><br><span class="line">        耍                                   :2d</span><br><span class="line">        section 测试</span><br><span class="line">        功能测试                              :active, a1, after des3, 3d</span><br><span class="line">        压力测试                               :after a1  , 20h</span><br><span class="line">        测试报告                               : 48h</span><br></pre></td></tr></table></figure><h1 id="Typora快捷键"><a href="#Typora快捷键" class="headerlink" title="Typora快捷键"></a>Typora快捷键</h1><h2 id="一：菜单栏"><a href="#一：菜单栏" class="headerlink" title="一：菜单栏"></a>一：菜单栏</h2><ul><li>文件：alt+F</li><li>编辑：alt+E</li><li>段落：alt+P</li><li>格式：alt+O</li><li>视图：alt+V</li><li>主题：alt+T</li><li>帮助：alt+H</li></ul><h2 id="二：文件"><a href="#二：文件" class="headerlink" title="二：文件"></a>二：文件</h2><ul><li>新建：Ctrl+N</li><li>新建窗口：Ctrl+Shift+N</li><li>打开：Ctrl+O</li><li>快速打开：Ctrl+P</li><li>保存：Ctrl+S</li><li>另存为：Ctrl+Shift+S</li><li>偏好：Ctrl+,</li><li>关闭：Ctrl+W</li></ul><h2 id="三：编辑"><a href="#三：编辑" class="headerlink" title="三：编辑"></a>三：编辑</h2><ul><li>撤销：Ctrl+Z</li><li>重做：Ctrl+Y</li><li>剪切：Ctrl+X</li><li>复制：Ctrl+C</li><li>粘贴：Ctrl+V</li><li>复制为MarkDown：Ctrl+Shift+C</li><li>粘贴为纯文本：Ctrl+Shift+V</li><li>全选：Ctrl+A</li><li>选中当前行&#x2F;句：Ctrl+L</li><li>选中当前格式文本：Ctrl+E</li><li>选中当前词：Ctrl+D</li><li>跳转到文首：Ctrl+Home</li><li>跳转到所选内容：Ctrl+J</li><li>跳转到文末：Ctrl+End</li><li>查找：Ctrl+F</li><li>查找下一个：F3</li><li>查找上一个：Shift+F3</li><li>替换：Ctrl+H</li></ul><h2 id="四：段落"><a href="#四：段落" class="headerlink" title="四：段落"></a>四：段落</h2><ul><li>标题：Ctrl+1&#x2F;2&#x2F;3&#x2F;4&#x2F;5</li><li>段落：Ctrl+0</li><li>增大标题级别：Ctrl+&#x3D;</li><li>减少标题级别：Ctrl+-</li><li>表格：Ctrl+T</li><li>代码块：Ctrl+Shift+K</li><li>公式块：Ctrl+Shift+M</li><li>引用：Ctrl+Shift+Q</li><li>有序列表：Ctrl+Shift+[</li><li>无序列表：Ctrl+Shift+]</li><li>增加缩进：Ctrl+]</li><li>减少缩进：Ctrl+[</li></ul><h2 id="五：格式"><a href="#五：格式" class="headerlink" title="五：格式"></a>五：格式</h2><ul><li>加粗：Ctrl+B</li><li>斜体：Ctrl+I</li><li>下划线：Ctrl+U</li><li>代码：Ctrl+Shift+&#96;</li><li>删除线：Alt+Shift+5</li><li>超链接：Ctrl+K</li><li>图像：Ctrl+Shift+I</li><li>清除样式：Ctrl+</li></ul><h2 id="六：视图"><a href="#六：视图" class="headerlink" title="六：视图"></a>六：视图</h2><ul><li>显示隐藏侧边栏：Ctrl+Shift+L</li><li>大纲视图：Ctrl+Shift+1</li><li>文档列表视图：Ctrl+Shift+2</li><li>文件树视图：Ctrl+Shift+3</li><li>源代码模式：Ctrl+&#x2F;</li><li>专注模式：F8</li><li>打字机模式：F9</li><li>切换全屏：F11</li><li>实际大小：Ctrl+Shift+0</li><li>放大：Ctrl+Shift+&#x3D;</li><li>缩小：Ctrl+Shift+-</li><li>应用内窗口切换：Ctrl+Tab</li><li>打开DevTools：Shift+F12</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客构建全详解</title>
      <link href="/2022/11/hexo%E5%8D%9A%E5%AE%A2%E6%9E%84%E5%BB%BA%E5%85%A8%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/11/hexo%E5%8D%9A%E5%AE%A2%E6%9E%84%E5%BB%BA%E5%85%A8%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么-Hexo？"><a href="#为什么-Hexo？" class="headerlink" title="为什么 Hexo？"></a>为什么 Hexo？</h1><p>首先能够看到这篇文章的你，多多少少是对 hexo 抱有一定兴趣的，可能想立马开始 hexo 博客的搭建工作。可在此之前你需要明确的是,你为什么选择 hexo?</p><p>对我而言，最早了解到 hexo 是我在浏览<a href="https://www.sqlsec.com/">国光博客</a>时发现该博客使用的就是 hexo 框架，精美的主题让我眼前一亮，浏览<a href="https://hexo.io/zh-cn/index.html">hexo 官网</a>后发现它与我以往了解的 WordPress 博客框架更有<a href="https://cloud.tencent.com/developer/article/1685754">很大的不同</a>，相比之下 hexo 能够使用 MarkDown，轻量，能够一键部署静态网站到 GitPage 更是吸引我，更加符合我做一个静态笔记博客的想法。</p><p>对你来说，要确认你的需求是否确定并且 hexo 是否满足，从<a href="https://juejin.cn/post/7002911266385707022#heading-9">众多博客框架</a>中选择适合的是非常重要的，后期因为需求的变动或者框架的约束再去更换新的框架，其成本是不低的，甚至难以接受！</p><p>至此，若你确性使用 Hexo 框架是明智的，那么接下来的阅读将带你从 0 开始（也许您会感到厌烦，但也因此能够照顾更多新手朋友），搭建一个属于自己的，可配置的个人博客，我们可以自选主题，自定义域名，甚至可以开放评论等等。</p><p>需要注意的是，hexo 框架搭建的网站属于静态站点，内容的变更需要进行再次部署，但也因此，你可以选择众多便捷且免费的静态托管网站，无须您因服务器等问题感到烦恼！</p><h1 id="Github-Page部署Hexo"><a href="#Github-Page部署Hexo" class="headerlink" title="Github Page部署Hexo"></a>Github Page部署Hexo</h1><p> 打开<a href="https://hexo.io/zh-cn/index.html">Hexo 官网</a>，引入眼帘的便是这行命令，也许你可能并不太了解相关知识，但我会带领着你逐步配置，无需担心。</p><p><img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/20221110143819.png" alt="hexo官网首页"></p><h2 id="安装-NPM"><a href="#安装-NPM" class="headerlink" title="安装 NPM"></a>安装 NPM</h2><p> 下面这段命令中，<code>npm</code> 我们目前并不知道其作用，<code>install</code> 者简明的表示安装的意思，<code>hexo-cli</code> 则是 hexo 框架的管理工具，<code>-g </code>表示 <code>global</code> 全局。结合来看，大致意思则是将 hexo 框架管理工具安装至电脑全局环境，<code>npm</code> 则是这个安装器。我将带你安装它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><ol><li>首先打开<a href="https://nodejs.org/en/">Node.js 官网</a>，无论是<code>windows</code>还是<code>macos</code>用户，点击下载安装即可，版本推荐选择<code>LTS</code>。</li></ol><img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/image-20221110145957547.png" alt="下载NodeJS" style="zoom:50%;"><ol start="2"><li>安装完成后，打开终端工具（<code>windows</code>用户按住<code>win+R</code>，输入 cmd 即可进入；<code>mac</code>用户在启动台中找到终端即可），输入下面命令且能成功输出版本号就已经安装完成了。</li></ol><img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/image-20221110150639997.png" alt="完成npm的安装" style="zoom:50%;"><blockquote><p>若出现错误，更多安装方法请自行百度。</p></blockquote><h2 id="安装-Hexo-框架"><a href="#安装-Hexo-框架" class="headerlink" title="安装 Hexo 框架"></a>安装 Hexo 框架</h2><p> 随后我们便可以使用上述那一行命令了。这边我们做一个小修改，在安装 <code>hexo-cli</code> 的同时，我们进行 <code>pnpm</code>（与<code>npm</code>作用类似）的安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli pnpm -g<span class="comment"># 安装hexo-cli与pnpm</span></span><br></pre></td></tr></table></figure><blockquote><p>pnpm 与 npm 的区别：<a href="https://www.pnpm.cn/">pnpm - 速度快、节省磁盘空间的软件包管理器 | pnpm 中文文档 | pnpm 中文网</a></p></blockquote><p> <a href="https://hexo.io/zh-cn/index.html">Hexo 官网</a>下面部分，还有几行命令我们看看什么意思，并自行选择文件夹在终端中进行尝试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog<span class="comment"># 使用hexo工具初始化一个名字叫blog的博客，完成后会创建一个项目文件夹</span></span><br><span class="line"><span class="built_in">cd</span> blog<span class="comment"># 进入该项目文件夹</span></span><br><span class="line">pnpm install<span class="comment"># 进行项目依赖的安装。原本使用npm进行安装，我们修改为pnpm</span></span><br><span class="line">hexo server<span class="comment"># 使用hexo工具启动项目</span></span><br></pre></td></tr></table></figure><p> 目前为止一切顺利的话，浏览器打开<a href="http://localhost:4000/">控制台中的网址</a>即可看到效果！恭喜 🎉</p><img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/202211101528766.png" alt="项目启动" style="zoom:40%;"><h2 id="准备-GitHub"><a href="#准备-GitHub" class="headerlink" title="准备 GitHub"></a>准备 GitHub</h2><p> 后续我们将要把该网站部署至网络中，我们将需要先行注册 github 账号并能够使用<code>git</code>工具。总结为下面这些步骤：</p><h3 id="1-注册-github-账号及创建仓库"><a href="#1-注册-github-账号及创建仓库" class="headerlink" title="1. 注册 github 账号及创建仓库"></a>1. 注册 github 账号及创建仓库</h3><p> 注册完成后创建两个仓库。一个任意名称的私有仓库将用于存放我们项目的源代码，还有一个仓库名为<code>用户名.github.io</code>的公有仓库用于存放我们网站打包后的代码。</p><img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/202211101557803.png" alt="创建仓库" style="zoom:30%;"><h3 id="2-配置git工具"><a href="#2-配置git工具" class="headerlink" title="2. 配置git工具"></a>2. 配置<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git"><code>git</code>工具</a></h3><ol><li><code>git</code>的安装</li></ol><ul><li><p><a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">win 下安装</a></p></li><li><p><a href="https://blog.csdn.net/rockvine/article/details/122898165">mac 下安装</a></p></li></ul><blockquote><p>安装步骤若出现错误请尝试配置访问代理。更多解决方案请自行百度。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试是否安装成功</span></span><br><span class="line">☁  ~  git -v</span><br><span class="line">git version 2.38.1</span><br></pre></td></tr></table></figure><ol start="2"><li>本地<code>git</code>配置</li></ol><p> 进行该配置目的是将项目推送至 github 时的身份说明。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;用户邮箱&quot;</span></span><br></pre></td></tr></table></figure><p> 但为了与 github 之间传输更方便，我们将采用 SSH 的方式进行用户验证。</p><h3 id="3-配置-SSH"><a href="#3-配置-SSH" class="headerlink" title="3. 配置 SSH"></a>3. 配置 SSH</h3><ol><li>查看 SSH 是否已经存在</li></ol><ul><li><p>windows</p><p>检查<code>系统盘 &gt; 用户 &gt; 用户名</code>目录下是否存在<code>.ssh</code>文件夹，若有则已有 SSH 存在，请跳至步骤 3</p></li><li><p>macos &#x2F; linux</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">☁  ~  <span class="built_in">ls</span> -a ~/.ssh<span class="comment"># 终端中执行该命令，若出现文件 id_rsa 和 id_rsa.pub 表明ssh已存在</span></span><br><span class="line">.               id_rsa          known_hosts</span><br><span class="line">..              id_rsa.pub      known_hosts.old</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>生成 SSH</li></ol><p> 执行下面命令，过程中无需设置密码，直接按回车跳过即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span>  <span class="comment"># 生成SSH</span></span><br></pre></td></tr></table></figure><blockquote><p>若 windows 用户出现 ssh-keygen 未安装，可以参考<a href="https://learn.microsoft.com/zh-cn/windows-server/administration/openssh/openssh_install_firstuse">该文章</a>进行安装 openssh</p></blockquote><ol start="3"><li>添加 SSH Key 至 github</li></ol><ul><li><p>获取 SSH Key</p><ul><li><p>windows 用户用文本编辑器打开<code>.ssh</code>目录下的<code>id_rsa.pub</code>，复制其内容即可</p></li><li><p>mac 用户在终端使用命令<code>cat ~/.ssh/id_rsa.pub</code>，复制其输出结果即可</p></li></ul></li><li><p>github 配置 ssh</p></li></ul><ol><li>点击进入 github 右上角设置中，选择 SSH 选项并生成 SSH key<img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/202211101643093.png" alt="github新建ssh key" style="zoom: 33%;"></li><li>添加 ssh key 即可</li></ol><img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/202211101648670.png" alt="添加ssh key" style="zoom:40%;"><h2 id="上传-Hexo-至-Github"><a href="#上传-Hexo-至-Github" class="headerlink" title="上传 Hexo 至 Github"></a>上传 Hexo 至 Github</h2><p> 首先我们需要获取仓库 ssh 链接。打开我们私有的存放项目的仓库，此时该仓库应该是空的，我们复制这里的链接</p><img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/202211101657359.png" alt="获取项目仓库ssh链接" style="zoom:70%;"><p> 我们进入 Hexo 项目文件夹，并在此执行下列终端命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin SSH链接<span class="comment"># 刚刚复制的SSH链接</span></span><br><span class="line">git branch -M main</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;init: 推送至远程仓库&quot;</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p> 至此，我们刷新项目仓库即发现已有内容存在。</p><h2 id="部署项目至Github-Page"><a href="#部署项目至Github-Page" class="headerlink" title="部署项目至Github Page"></a>部署项目至Github Page</h2><p>首先我们打开部署仓库，即仓库名为<code>用户名.github.io</code>仓库，复制仓库的 SSH 链接。接着打开项目根目录下<code>_config.yml</code>文件，找到最底部的<code>deploy</code>选项，添加如下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span>  <span class="comment"># 表示使用gitpage的部署方式</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">部署仓库的SSH链接</span> <span class="comment"># 部署仓库链接</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span><span class="comment"># 部署目标分支</span></span><br></pre></td></tr></table></figure><p>随后我们在项目终端执行hexo部署命令即刻：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>我们发现部署仓库的已经发生了更新，这时我们就能够浏览器，用户名.github.io这个链接访问你的项目了。</p><img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/%E9%83%A8%E7%BD%B2%E8%87%B3git.png" alt="部署至GitPage" style="zoom:50%;"><h3 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h3><p>如果我们想要自定义的域名去访问项目，首先我们需要去云服务器上哪里购买属于自己的域名并完成相关实名认证。</p><p>域名注册：</p><ul><li><p><a href="https://wanwang.aliyun.com/domain/">阿里云域名注册</a></p></li><li><p><a href="https://buy.cloud.tencent.com/domain">腾讯云域名注册</a></p></li></ul><p>域名解析：</p><p>添加一条主机记录为<code>www</code>，记录类型为<code>CNAME</code>，路线类型为<code>默认</code>，记录值为<code>用户名.github.io</code>的解析记录</p><p><img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/202211111214230.png" alt="域名解析至gitpage"></p><p>随后我们打开部署仓库右上角的设置按钮，点开Page选项，并添加自己的域名。</p><p><img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/202211111220228.png" alt="添加自定义域名"></p><h2 id="更多教程"><a href="#更多教程" class="headerlink" title="更多教程"></a>更多教程</h2><p>下面这些教程中可能包含着主题配置，目前我们暂未涉及，将在下面一部分进行介绍。</p><ul><li><p><a href="https://yelog.org/2016/10/22/hexo-gitHub-pages-create-own-blog/">Hexo+GitHub Pages 搭建属于自己的 blog | 叶落阁 (yelog.org)</a></p></li><li><p><a href="https://blog.moehz.com/archives/hexo-shoka-build.html">Hexo 博客搭建：基础配置- hexo - blog | Moe Hz &#x3D; 萌 Hz | 木白の时记 &#x3D; 日々私たちが过ごしている日常は、実は、奇迹の连続なのかもしれない</a></p></li><li><p><a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-11">超详细 Hexo+Github 博客搭建小白教程 | 韦阳的博客 (godweiyang.com)</a></p></li></ul><h1 id="3-Hexo主题配置"><a href="#3-Hexo主题配置" class="headerlink" title="3-Hexo主题配置"></a><code>3-Hexo</code>主题配置</h1><p>我采用的主题是<code>3-hexo</code>，乍看上去其貌不扬，但简朴的交互设计让其更专注于内容展示，这也是我选择它的主要原因。该主题的创作者也出品了官方教程，我也不在过多赘述，重点谈下遇到的几个问题及解决。</p><ul><li><p>github地址：<a href="https://github.com/yelog/hexo-theme-3-hexo">yelog&#x2F;hexo-theme-3-hexo: hexo 主题：三段式设计、极简、方便 Hexo theme: three-stage design (github.com)</a></p></li><li><p>作者教学：<a href="https://yelog.org/2017/03/23/3-hexo-instruction/">3-hexo使用说明 | 叶落阁 (yelog.org)</a></p></li></ul><p>其中遇到最奇怪的问题便是<strong>部署生成的页面是空的</strong>，排查后发现index.html也是空的，问题便出现在了生成部署文件这个步骤上，百度这个问题后发现，选取的hexo版本一定要和node版本之间保持合理的区间，<strong>node版本无论是过高还是过低都可能会出现问题</strong>！</p><h1 id="Github-Action-自动部署"><a href="#Github-Action-自动部署" class="headerlink" title="Github Action 自动部署"></a>Github Action 自动部署</h1><p>虽然hexo博客的基本部署工作已经完成了，但是每次想要部署的时候都需要手动去执行指令。</p><p>那有没有什么办法可以优化这种体验呢？这时就可以使用github给我们提供的自动化流作业功能，即workflow。</p><p>下面是我们要实现的目标功能：<strong>每当项目代码更新并推送至github仓库时，都会进行重新部署，使我们的博客内容得到及时而且方便的更新。</strong></p><ol><li>首先我们点击项目仓库的<code>Settings</code>，进入<code>secrets</code>并创建<code>actions sercrets</code>。</li></ol><img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/%E8%AE%BE%E7%BD%AEssh%E7%A7%81%E9%92%A5.png" alt="设置ssh私钥" style="zoom:50%;"><blockquote><p> 注意输入的私钥需要 <code>id_rsa</code> 中的全部内容，否则可能出现<code>Load key &quot;/home/runner/.ssh/id_rsa&quot;: invalid format</code>错误</p></blockquote><ol start="2"><li>点击<code>action</code>功能，并选择 <code>new workflow</code>，进入 <code>set up a workflow yourself</code> 功能。</li></ol><img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/202211111813179.png" alt="创建自定义工作流" style="zoom:50%;"><ol start="3"><li>输入工作流名称后，填入图片下方工作流代码，最后进行提交即可。</li></ol><p><img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/202211111818444.png" alt="填入工作流代码"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># workflow name</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Blog</span> <span class="string">CI</span></span><br><span class="line"><span class="comment"># master branch on push, auto run</span></span><br><span class="line"><span class="attr">on:</span> </span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span> </span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">macos-12</span></span><br><span class="line">        </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># check it to your workflow can access it</span></span><br><span class="line">    <span class="comment"># from: https://github.com/actions/checkout</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">Repository</span> <span class="string">master</span> <span class="string">branch</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@master</span> </span><br><span class="line">      </span><br><span class="line">    <span class="comment"># from: https://github.com/actions/setup-node  </span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span> <span class="number">19.</span><span class="string">x</span> </span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;19.x&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span> <span class="string">Dependencies</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        npm install hexo-cli pnpm -g</span></span><br><span class="line"><span class="string">        pnpm install</span></span><br><span class="line"><span class="string"></span>    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Deploy</span> <span class="string">Private</span> <span class="string">Key</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">HEXO_DEPLOY_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">        echo &quot;$HEXO_DEPLOY_PRIVATE_KEY&quot; &gt; ~/.ssh/id_rsa </span></span><br><span class="line"><span class="string">        chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string"></span>    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Git</span> <span class="string">Infomation</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">| </span></span><br><span class="line"><span class="string">        git config --global user.name &#x27;用户名&#x27; </span></span><br><span class="line"><span class="string">        git config --global user.email &#x27;**@**.com&#x27;</span></span><br><span class="line"><span class="string"></span>        </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        hexo clean</span></span><br><span class="line"><span class="string">        hexo generate </span></span><br><span class="line"><span class="string">        hexo deploy</span></span><br></pre></td></tr></table></figure><blockquote><p>改步骤问题可能较多：</p><p>Encrypted secrets功能的使用参见：<a href="https://docs.github.com/cn/actions/security-guides/encrypted-secrets">Encrypted secrets - GitHub Docs</a></p><p>Workflow机型参见：<a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#choosing-github-hosted-runners">Workflow syntax for GitHub Actions - GitHub Docs</a></p></blockquote><h2 id="出现访问界面为空问题"><a href="#出现访问界面为空问题" class="headerlink" title="出现访问界面为空问题"></a>出现访问界面为空问题</h2><p>请注意设置主题文件后及时<strong>将主题项目中的<code>.git</code>文件删去</strong>。</p><p>如果不删除直接上传git，会出现项目仓库中的<code>themes</code>目录无法访问，导致生成的主页面为空。</p><p>如果已经碰到该问题，请尝试根据下面链接进行解决：</p><ul><li><a href="https://blog.csdn.net/panruola/article/details/107231640">git 上传文件夹后无法点击进入</a></li><li><a href="https://www.zhihu.com/question/38781463">hexo 本地测试运行重启后页面空白,提示 : WARN No layout: index.html? - 知乎 (zhihu.com)</a></li></ul><h2 id="更多教程-1"><a href="#更多教程-1" class="headerlink" title="更多教程"></a>更多教程</h2><p>下面两个链接同样介绍了如何使用<code>github action</code> 实现自动部署：</p><ul><li><p><a href="https://blog.moehz.com/archives/github-action.html">番外二：利用 github action 自动部署 hexo</a></p></li><li><p><a href="https://blog.nowcoder.net/n/31b1dc9153bc48e98caf24e258f369b5?from=nowcoder_improve">Github Actions 解决仓库同步与自动部署问题_牛客博客 (nowcoder.net)</a></p></li></ul><h1 id="使用-vercel-部署"><a href="#使用-vercel-部署" class="headerlink" title="使用 vercel 部署"></a>使用 vercel 部署</h1><p>上面我们使用了<code>Github Page</code> 实现了Hexo博客的部署，但访问起来可能会非常满。其实静态托管网站还有很多(<a href="https://juejin.cn/post/7065115103720374302">各类托管网站对比</a>)，下面就介绍如何使用vercel进行托管，以加速国内访问博客的速度。</p><ol><li><p>首先我们需要注册一个vercel账号：<a href="https://vercel.com/signup">https://vercel.com/signup</a></p></li><li><p>使用Github账号登陆并选择导入我们的项目仓库。</p></li></ol><img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE%E4%BB%93%E5%BA%93.png" alt="导入项目仓库" style="zoom:50%;"><ol start="3"><li>输入项目名并点击部署即可，注意选择项目类型为Hexo。</li></ol><img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/%E4%BB%93%E5%BA%93%E5%AF%BC%E5%85%A5vercel.png" alt="仓库导入vercel" style="zoom: 33%;"><ol start="4"><li>进入vercel选择设置中的域名设置，直接添加要设置的域名即可。<img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/vercel%E8%AE%BE%E7%BD%AE%E5%9F%9F%E5%90%8D.png" alt="vercel中配置域名"></li></ol><h2 id="设置域名解析分流"><a href="#设置域名解析分流" class="headerlink" title="设置域名解析分流"></a>设置域名解析分流</h2><p>由于我们静态网站部署了两个平台，国内访问vercel速度更快，国外则可以访问<code>github page</code>，所以我们可以设置下域名不同的解析路径。</p><p>域名解析如图设置即可：</p><p><img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E8%AE%BE%E7%BD%AE.png" alt="域名解析设置"></p><p>让我们用<a href="https://www.racent.com/dns-check">DNS查询</a>网站测试下访问线路，效果如图即已成功：</p><p><img src="https://picgo-junfuchang.oss-cn-hangzhou.aliyuncs.com/img/%E8%A7%A3%E6%9E%90%E5%88%86%E6%B5%81.png" alt="域名解析分流效果"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>我在刚接触Hexo部署时，百度发现一众用户推荐Coding这个平台作为托管网站，所以经过许多尝试将github仓库代码自动同步至Coding。</p><p>但当功能真正实现时才发现，coding平台已于2021年正式取消静态托管服务，取而代之的则是功能相似的收费服务，遂放弃使用该平台。</p><p>以下一些资料仅供记录：</p><ul><li>[定时同步开源代码库 - CODING 帮助中心](<a href="https://coding.net/help/docs/ci/practice/sync-from-github.html#:~:text=%E6%9C%89%E6%B2%A1%E6%9C%89%E4%B8%80%E7%A7%8D%E9%AB%98%E6%95%88%E7%9A%84%E6%96%B9%E6%B3%95%E8%83%BD%E5%A4%9F%E5%AE%9E%E7%8E%B0">https://coding.net/help/docs/ci/practice/sync-from-github.html#:~:text=有没有一种高效的方法能够实现</a> GitHub 代码仓库与 CODING 仓库的定时同步？,答案是使用持续集成定时触发构建计划，这样便能够避免手动拉取 GitHub 仓库里的代码，而后再推送至 CODING 仓库的繁琐操作，一劳永逸。)</li><li><a href="https://blog.zzy-ac.top/2022/03/06/coding-syn-github/">https://blog.zzy-ac.top/2022/03/06/coding-syn-github/</a></li><li><a href="https://www.10101.io/2018/09/18/Blog_3">将 Jekyll 博客同时托管在 Github Pages 和 Coding Pages | Blog 折腾小记（3） - 方寸间 (10101.io)</a></li><li><a href="https://coding.net/help/docs/ci/practice/static-website.html#pageTitle">https://coding.net/help/docs/ci/practice/static-website.html#pageTitle</a></li><li><a href="https://blog.csdn.net/Ber_Bai/article/details/114484645">(14 条消息) 利用 GitHub 的 Actions 自动同步 gitee 仓库，并 Gitee Pages 自动部署项目_鳄鱼儿的博客-CSDN 博客_github action 同步仓库</a></li></ul><h1 id="图片管理"><a href="#图片管理" class="headerlink" title="图片管理"></a>图片管理</h1><p>Hexo框架拥有自己独有的图片管理方式，图片引入的写法与markdown有较大不同，下面分别介绍下本地图片管理和网络图片管理两种方式以解决这个问题。</p><h2 id="本地图片管理"><a href="#本地图片管理" class="headerlink" title="本地图片管理"></a>本地图片管理</h2><p>我们可以安装插件解决引用格式问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>确保 <code>_config.yml</code> 中 <code>post_asset_folder: true</code>。</p><p>使用 <code>![img](img.jpg)</code>格式 就可引用到图片 <code>img.jpg</code>.</p><p>对与图片存储位置的问题，推荐下面这篇文章，介绍的很是清晰：</p><p><a href="https://blog.csdn.net/m0_43401436/article/details/107191688">hexo 博客中插入图片失败——解决思路及个人最终解决办法_金牛大王的博客-CSDN 博客</a></p><h2 id="使用-picgo-上传网络管理"><a href="#使用-picgo-上传网络管理" class="headerlink" title="使用 picgo 上传网络管理"></a>使用 picgo 上传网络管理</h2><p>网络管理图片即使用Picgo这个工具，将图片上传至OSS，在文章中使用图片的网络链接即可。</p><p>Picgo文档对此也有清晰的教学：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E9%98%BF%E9%87%8C%E4%BA%91oss">配置手册 | PicGo</a></p><blockquote><p><a href="https://help.aliyun.com/document_detail/38738.html">如何获取阿里云云账号 AccessKey ID 和 AccessKey Secret (aliyun.com)</a></p></blockquote><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>我接触Hexo博客的时间也仅仅是这两天，写的很多内容肯定是非常潦草的，但尽量记录了我所遇到的问题并提供了解决问题的链接。</p><p>作为个人博客搭建过程的记录，同时希望能够帮助到更多人～</p><p>完结撒花🎉</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
